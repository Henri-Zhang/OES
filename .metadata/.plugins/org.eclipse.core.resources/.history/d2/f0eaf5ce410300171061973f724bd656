/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package priv.barrow.service.persistence.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.dao.orm.EntityCache;
import com.liferay.portal.kernel.dao.orm.FinderCache;
import com.liferay.portal.kernel.dao.orm.FinderPath;
import com.liferay.portal.kernel.dao.orm.Query;
import com.liferay.portal.kernel.dao.orm.QueryPos;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.service.persistence.impl.BasePersistenceImpl;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.spring.extender.service.ServiceReference;

import priv.barrow.exception.NoSuchStudentExamException;

import priv.barrow.model.StudentExam;
import priv.barrow.model.impl.StudentExamImpl;
import priv.barrow.model.impl.StudentExamModelImpl;

import priv.barrow.service.persistence.StudentExamPK;
import priv.barrow.service.persistence.StudentExamPersistence;

import java.io.Serializable;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * The persistence implementation for the student exam service.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentExamPersistence
 * @see priv.barrow.service.persistence.StudentExamUtil
 * @generated
 */
@ProviderType
public class StudentExamPersistenceImpl extends BasePersistenceImpl<StudentExam>
	implements StudentExamPersistence {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link StudentExamUtil} to access the student exam persistence. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
	 */
	public static final String FINDER_CLASS_NAME_ENTITY = StudentExamImpl.class.getName();
	public static final String FINDER_CLASS_NAME_LIST_WITH_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List1";
	public static final String FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List2";
	public static final FinderPath FINDER_PATH_WITH_PAGINATION_FIND_ALL = new FinderPath(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamModelImpl.FINDER_CACHE_ENABLED, StudentExamImpl.class,
			FINDER_CLASS_NAME_LIST_WITH_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL = new FinderPath(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamModelImpl.FINDER_CACHE_ENABLED, StudentExamImpl.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_COUNT_ALL = new FinderPath(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamModelImpl.FINDER_CACHE_ENABLED, Long.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countAll", new String[0]);
	public static final FinderPath FINDER_PATH_WITH_PAGINATION_FIND_BY_EXAMRECORDID =
		new FinderPath(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamModelImpl.FINDER_CACHE_ENABLED, StudentExamImpl.class,
			FINDER_CLASS_NAME_LIST_WITH_PAGINATION, "findByexamRecordId",
			new String[] {
				Long.class.getName(),
				
			Integer.class.getName(), Integer.class.getName(),
				OrderByComparator.class.getName()
			});
	public static final FinderPath FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_EXAMRECORDID =
		new FinderPath(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamModelImpl.FINDER_CACHE_ENABLED, StudentExamImpl.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "findByexamRecordId",
			new String[] { Long.class.getName() },
			StudentExamModelImpl.EXAMRECORDID_COLUMN_BITMASK);
	public static final FinderPath FINDER_PATH_COUNT_BY_EXAMRECORDID = new FinderPath(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamModelImpl.FINDER_CACHE_ENABLED, Long.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countByexamRecordId",
			new String[] { Long.class.getName() });

	/**
	 * Returns all the student exams where examRecordId = &#63;.
	 *
	 * @param examRecordId the exam record ID
	 * @return the matching student exams
	 */
	@Override
	public List<StudentExam> findByexamRecordId(long examRecordId) {
		return findByexamRecordId(examRecordId, QueryUtil.ALL_POS,
			QueryUtil.ALL_POS, null);
	}

	/**
	 * Returns a range of all the student exams where examRecordId = &#63;.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param examRecordId the exam record ID
	 * @param start the lower bound of the range of student exams
	 * @param end the upper bound of the range of student exams (not inclusive)
	 * @return the range of matching student exams
	 */
	@Override
	public List<StudentExam> findByexamRecordId(long examRecordId, int start,
		int end) {
		return findByexamRecordId(examRecordId, start, end, null);
	}

	/**
	 * Returns an ordered range of all the student exams where examRecordId = &#63;.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param examRecordId the exam record ID
	 * @param start the lower bound of the range of student exams
	 * @param end the upper bound of the range of student exams (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching student exams
	 */
	@Override
	public List<StudentExam> findByexamRecordId(long examRecordId, int start,
		int end, OrderByComparator<StudentExam> orderByComparator) {
		return findByexamRecordId(examRecordId, start, end, orderByComparator,
			true);
	}

	/**
	 * Returns an ordered range of all the student exams where examRecordId = &#63;.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param examRecordId the exam record ID
	 * @param start the lower bound of the range of student exams
	 * @param end the upper bound of the range of student exams (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @param retrieveFromCache whether to retrieve from the finder cache
	 * @return the ordered range of matching student exams
	 */
	@Override
	public List<StudentExam> findByexamRecordId(long examRecordId, int start,
		int end, OrderByComparator<StudentExam> orderByComparator,
		boolean retrieveFromCache) {
		boolean pagination = true;
		FinderPath finderPath = null;
		Object[] finderArgs = null;

		if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&
				(orderByComparator == null)) {
			pagination = false;
			finderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_EXAMRECORDID;
			finderArgs = new Object[] { examRecordId };
		}
		else {
			finderPath = FINDER_PATH_WITH_PAGINATION_FIND_BY_EXAMRECORDID;
			finderArgs = new Object[] {
					examRecordId,
					
					start, end, orderByComparator
				};
		}

		List<StudentExam> list = null;

		if (retrieveFromCache) {
			list = (List<StudentExam>)finderCache.getResult(finderPath,
					finderArgs, this);

			if ((list != null) && !list.isEmpty()) {
				for (StudentExam studentExam : list) {
					if ((examRecordId != studentExam.getExamRecordId())) {
						list = null;

						break;
					}
				}
			}
		}

		if (list == null) {
			StringBundler query = null;

			if (orderByComparator != null) {
				query = new StringBundler(3 +
						(orderByComparator.getOrderByFields().length * 2));
			}
			else {
				query = new StringBundler(3);
			}

			query.append(_SQL_SELECT_STUDENTEXAM_WHERE);

			query.append(_FINDER_COLUMN_EXAMRECORDID_EXAMRECORDID_2);

			if (orderByComparator != null) {
				appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,
					orderByComparator);
			}
			else
			 if (pagination) {
				query.append(StudentExamModelImpl.ORDER_BY_JPQL);
			}

			String sql = query.toString();

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				QueryPos qPos = QueryPos.getInstance(q);

				qPos.add(examRecordId);

				if (!pagination) {
					list = (List<StudentExam>)QueryUtil.list(q, getDialect(),
							start, end, false);

					Collections.sort(list);

					list = Collections.unmodifiableList(list);
				}
				else {
					list = (List<StudentExam>)QueryUtil.list(q, getDialect(),
							start, end);
				}

				cacheResult(list);

				finderCache.putResult(finderPath, finderArgs, list);
			}
			catch (Exception e) {
				finderCache.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return list;
	}

	/**
	 * Returns the first student exam in the ordered set where examRecordId = &#63;.
	 *
	 * @param examRecordId the exam record ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the first matching student exam
	 * @throws NoSuchStudentExamException if a matching student exam could not be found
	 */
	@Override
	public StudentExam findByexamRecordId_First(long examRecordId,
		OrderByComparator<StudentExam> orderByComparator)
		throws NoSuchStudentExamException {
		StudentExam studentExam = fetchByexamRecordId_First(examRecordId,
				orderByComparator);

		if (studentExam != null) {
			return studentExam;
		}

		StringBundler msg = new StringBundler(4);

		msg.append(_NO_SUCH_ENTITY_WITH_KEY);

		msg.append("examRecordId=");
		msg.append(examRecordId);

		msg.append(StringPool.CLOSE_CURLY_BRACE);

		throw new NoSuchStudentExamException(msg.toString());
	}

	/**
	 * Returns the first student exam in the ordered set where examRecordId = &#63;.
	 *
	 * @param examRecordId the exam record ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the first matching student exam, or <code>null</code> if a matching student exam could not be found
	 */
	@Override
	public StudentExam fetchByexamRecordId_First(long examRecordId,
		OrderByComparator<StudentExam> orderByComparator) {
		List<StudentExam> list = findByexamRecordId(examRecordId, 0, 1,
				orderByComparator);

		if (!list.isEmpty()) {
			return list.get(0);
		}

		return null;
	}

	/**
	 * Returns the last student exam in the ordered set where examRecordId = &#63;.
	 *
	 * @param examRecordId the exam record ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the last matching student exam
	 * @throws NoSuchStudentExamException if a matching student exam could not be found
	 */
	@Override
	public StudentExam findByexamRecordId_Last(long examRecordId,
		OrderByComparator<StudentExam> orderByComparator)
		throws NoSuchStudentExamException {
		StudentExam studentExam = fetchByexamRecordId_Last(examRecordId,
				orderByComparator);

		if (studentExam != null) {
			return studentExam;
		}

		StringBundler msg = new StringBundler(4);

		msg.append(_NO_SUCH_ENTITY_WITH_KEY);

		msg.append("examRecordId=");
		msg.append(examRecordId);

		msg.append(StringPool.CLOSE_CURLY_BRACE);

		throw new NoSuchStudentExamException(msg.toString());
	}

	/**
	 * Returns the last student exam in the ordered set where examRecordId = &#63;.
	 *
	 * @param examRecordId the exam record ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the last matching student exam, or <code>null</code> if a matching student exam could not be found
	 */
	@Override
	public StudentExam fetchByexamRecordId_Last(long examRecordId,
		OrderByComparator<StudentExam> orderByComparator) {
		int count = countByexamRecordId(examRecordId);

		if (count == 0) {
			return null;
		}

		List<StudentExam> list = findByexamRecordId(examRecordId, count - 1,
				count, orderByComparator);

		if (!list.isEmpty()) {
			return list.get(0);
		}

		return null;
	}

	/**
	 * Returns the student exams before and after the current student exam in the ordered set where examRecordId = &#63;.
	 *
	 * @param studentExamPK the primary key of the current student exam
	 * @param examRecordId the exam record ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the previous, current, and next student exam
	 * @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	 */
	@Override
	public StudentExam[] findByexamRecordId_PrevAndNext(
		StudentExamPK studentExamPK, long examRecordId,
		OrderByComparator<StudentExam> orderByComparator)
		throws NoSuchStudentExamException {
		StudentExam studentExam = findByPrimaryKey(studentExamPK);

		Session session = null;

		try {
			session = openSession();

			StudentExam[] array = new StudentExamImpl[3];

			array[0] = getByexamRecordId_PrevAndNext(session, studentExam,
					examRecordId, orderByComparator, true);

			array[1] = studentExam;

			array[2] = getByexamRecordId_PrevAndNext(session, studentExam,
					examRecordId, orderByComparator, false);

			return array;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}

	protected StudentExam getByexamRecordId_PrevAndNext(Session session,
		StudentExam studentExam, long examRecordId,
		OrderByComparator<StudentExam> orderByComparator, boolean previous) {
		StringBundler query = null;

		if (orderByComparator != null) {
			query = new StringBundler(4 +
					(orderByComparator.getOrderByConditionFields().length * 3) +
					(orderByComparator.getOrderByFields().length * 3));
		}
		else {
			query = new StringBundler(3);
		}

		query.append(_SQL_SELECT_STUDENTEXAM_WHERE);

		query.append(_FINDER_COLUMN_EXAMRECORDID_EXAMRECORDID_2);

		if (orderByComparator != null) {
			String[] orderByConditionFields = orderByComparator.getOrderByConditionFields();

			if (orderByConditionFields.length > 0) {
				query.append(WHERE_AND);
			}

			for (int i = 0; i < orderByConditionFields.length; i++) {
				query.append(_ORDER_BY_ENTITY_ALIAS);
				query.append(orderByConditionFields[i]);

				if ((i + 1) < orderByConditionFields.length) {
					if (orderByComparator.isAscending() ^ previous) {
						query.append(WHERE_GREATER_THAN_HAS_NEXT);
					}
					else {
						query.append(WHERE_LESSER_THAN_HAS_NEXT);
					}
				}
				else {
					if (orderByComparator.isAscending() ^ previous) {
						query.append(WHERE_GREATER_THAN);
					}
					else {
						query.append(WHERE_LESSER_THAN);
					}
				}
			}

			query.append(ORDER_BY_CLAUSE);

			String[] orderByFields = orderByComparator.getOrderByFields();

			for (int i = 0; i < orderByFields.length; i++) {
				query.append(_ORDER_BY_ENTITY_ALIAS);
				query.append(orderByFields[i]);

				if ((i + 1) < orderByFields.length) {
					if (orderByComparator.isAscending() ^ previous) {
						query.append(ORDER_BY_ASC_HAS_NEXT);
					}
					else {
						query.append(ORDER_BY_DESC_HAS_NEXT);
					}
				}
				else {
					if (orderByComparator.isAscending() ^ previous) {
						query.append(ORDER_BY_ASC);
					}
					else {
						query.append(ORDER_BY_DESC);
					}
				}
			}
		}
		else {
			query.append(StudentExamModelImpl.ORDER_BY_JPQL);
		}

		String sql = query.toString();

		Query q = session.createQuery(sql);

		q.setFirstResult(0);
		q.setMaxResults(2);

		QueryPos qPos = QueryPos.getInstance(q);

		qPos.add(examRecordId);

		if (orderByComparator != null) {
			Object[] values = orderByComparator.getOrderByConditionValues(studentExam);

			for (Object value : values) {
				qPos.add(value);
			}
		}

		List<StudentExam> list = q.list();

		if (list.size() == 2) {
			return list.get(1);
		}
		else {
			return null;
		}
	}

	/**
	 * Removes all the student exams where examRecordId = &#63; from the database.
	 *
	 * @param examRecordId the exam record ID
	 */
	@Override
	public void removeByexamRecordId(long examRecordId) {
		for (StudentExam studentExam : findByexamRecordId(examRecordId,
				QueryUtil.ALL_POS, QueryUtil.ALL_POS, null)) {
			remove(studentExam);
		}
	}

	/**
	 * Returns the number of student exams where examRecordId = &#63;.
	 *
	 * @param examRecordId the exam record ID
	 * @return the number of matching student exams
	 */
	@Override
	public int countByexamRecordId(long examRecordId) {
		FinderPath finderPath = FINDER_PATH_COUNT_BY_EXAMRECORDID;

		Object[] finderArgs = new Object[] { examRecordId };

		Long count = (Long)finderCache.getResult(finderPath, finderArgs, this);

		if (count == null) {
			StringBundler query = new StringBundler(2);

			query.append(_SQL_COUNT_STUDENTEXAM_WHERE);

			query.append(_FINDER_COLUMN_EXAMRECORDID_EXAMRECORDID_2);

			String sql = query.toString();

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				QueryPos qPos = QueryPos.getInstance(q);

				qPos.add(examRecordId);

				count = (Long)q.uniqueResult();

				finderCache.putResult(finderPath, finderArgs, count);
			}
			catch (Exception e) {
				finderCache.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return count.intValue();
	}

	private static final String _FINDER_COLUMN_EXAMRECORDID_EXAMRECORDID_2 = "studentExam.id.examRecordId = ?";
	public static final FinderPath FINDER_PATH_WITH_PAGINATION_FIND_BY_STUDENTID =
		new FinderPath(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamModelImpl.FINDER_CACHE_ENABLED, StudentExamImpl.class,
			FINDER_CLASS_NAME_LIST_WITH_PAGINATION, "findBystudentId",
			new String[] {
				Long.class.getName(),
				
			Integer.class.getName(), Integer.class.getName(),
				OrderByComparator.class.getName()
			});
	public static final FinderPath FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_STUDENTID =
		new FinderPath(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamModelImpl.FINDER_CACHE_ENABLED, StudentExamImpl.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "findBystudentId",
			new String[] { Long.class.getName() },
			StudentExamModelImpl.STUDENTID_COLUMN_BITMASK);
	public static final FinderPath FINDER_PATH_COUNT_BY_STUDENTID = new FinderPath(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamModelImpl.FINDER_CACHE_ENABLED, Long.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countBystudentId",
			new String[] { Long.class.getName() });

	/**
	 * Returns all the student exams where studentId = &#63;.
	 *
	 * @param studentId the student ID
	 * @return the matching student exams
	 */
	@Override
	public List<StudentExam> findBystudentId(long studentId) {
		return findBystudentId(studentId, QueryUtil.ALL_POS, QueryUtil.ALL_POS,
			null);
	}

	/**
	 * Returns a range of all the student exams where studentId = &#63;.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param studentId the student ID
	 * @param start the lower bound of the range of student exams
	 * @param end the upper bound of the range of student exams (not inclusive)
	 * @return the range of matching student exams
	 */
	@Override
	public List<StudentExam> findBystudentId(long studentId, int start, int end) {
		return findBystudentId(studentId, start, end, null);
	}

	/**
	 * Returns an ordered range of all the student exams where studentId = &#63;.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param studentId the student ID
	 * @param start the lower bound of the range of student exams
	 * @param end the upper bound of the range of student exams (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching student exams
	 */
	@Override
	public List<StudentExam> findBystudentId(long studentId, int start,
		int end, OrderByComparator<StudentExam> orderByComparator) {
		return findBystudentId(studentId, start, end, orderByComparator, true);
	}

	/**
	 * Returns an ordered range of all the student exams where studentId = &#63;.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param studentId the student ID
	 * @param start the lower bound of the range of student exams
	 * @param end the upper bound of the range of student exams (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @param retrieveFromCache whether to retrieve from the finder cache
	 * @return the ordered range of matching student exams
	 */
	@Override
	public List<StudentExam> findBystudentId(long studentId, int start,
		int end, OrderByComparator<StudentExam> orderByComparator,
		boolean retrieveFromCache) {
		boolean pagination = true;
		FinderPath finderPath = null;
		Object[] finderArgs = null;

		if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&
				(orderByComparator == null)) {
			pagination = false;
			finderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_STUDENTID;
			finderArgs = new Object[] { studentId };
		}
		else {
			finderPath = FINDER_PATH_WITH_PAGINATION_FIND_BY_STUDENTID;
			finderArgs = new Object[] { studentId, start, end, orderByComparator };
		}

		List<StudentExam> list = null;

		if (retrieveFromCache) {
			list = (List<StudentExam>)finderCache.getResult(finderPath,
					finderArgs, this);

			if ((list != null) && !list.isEmpty()) {
				for (StudentExam studentExam : list) {
					if ((studentId != studentExam.getStudentId())) {
						list = null;

						break;
					}
				}
			}
		}

		if (list == null) {
			StringBundler query = null;

			if (orderByComparator != null) {
				query = new StringBundler(3 +
						(orderByComparator.getOrderByFields().length * 2));
			}
			else {
				query = new StringBundler(3);
			}

			query.append(_SQL_SELECT_STUDENTEXAM_WHERE);

			query.append(_FINDER_COLUMN_STUDENTID_STUDENTID_2);

			if (orderByComparator != null) {
				appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,
					orderByComparator);
			}
			else
			 if (pagination) {
				query.append(StudentExamModelImpl.ORDER_BY_JPQL);
			}

			String sql = query.toString();

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				QueryPos qPos = QueryPos.getInstance(q);

				qPos.add(studentId);

				if (!pagination) {
					list = (List<StudentExam>)QueryUtil.list(q, getDialect(),
							start, end, false);

					Collections.sort(list);

					list = Collections.unmodifiableList(list);
				}
				else {
					list = (List<StudentExam>)QueryUtil.list(q, getDialect(),
							start, end);
				}

				cacheResult(list);

				finderCache.putResult(finderPath, finderArgs, list);
			}
			catch (Exception e) {
				finderCache.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return list;
	}

	/**
	 * Returns the first student exam in the ordered set where studentId = &#63;.
	 *
	 * @param studentId the student ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the first matching student exam
	 * @throws NoSuchStudentExamException if a matching student exam could not be found
	 */
	@Override
	public StudentExam findBystudentId_First(long studentId,
		OrderByComparator<StudentExam> orderByComparator)
		throws NoSuchStudentExamException {
		StudentExam studentExam = fetchBystudentId_First(studentId,
				orderByComparator);

		if (studentExam != null) {
			return studentExam;
		}

		StringBundler msg = new StringBundler(4);

		msg.append(_NO_SUCH_ENTITY_WITH_KEY);

		msg.append("studentId=");
		msg.append(studentId);

		msg.append(StringPool.CLOSE_CURLY_BRACE);

		throw new NoSuchStudentExamException(msg.toString());
	}

	/**
	 * Returns the first student exam in the ordered set where studentId = &#63;.
	 *
	 * @param studentId the student ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the first matching student exam, or <code>null</code> if a matching student exam could not be found
	 */
	@Override
	public StudentExam fetchBystudentId_First(long studentId,
		OrderByComparator<StudentExam> orderByComparator) {
		List<StudentExam> list = findBystudentId(studentId, 0, 1,
				orderByComparator);

		if (!list.isEmpty()) {
			return list.get(0);
		}

		return null;
	}

	/**
	 * Returns the last student exam in the ordered set where studentId = &#63;.
	 *
	 * @param studentId the student ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the last matching student exam
	 * @throws NoSuchStudentExamException if a matching student exam could not be found
	 */
	@Override
	public StudentExam findBystudentId_Last(long studentId,
		OrderByComparator<StudentExam> orderByComparator)
		throws NoSuchStudentExamException {
		StudentExam studentExam = fetchBystudentId_Last(studentId,
				orderByComparator);

		if (studentExam != null) {
			return studentExam;
		}

		StringBundler msg = new StringBundler(4);

		msg.append(_NO_SUCH_ENTITY_WITH_KEY);

		msg.append("studentId=");
		msg.append(studentId);

		msg.append(StringPool.CLOSE_CURLY_BRACE);

		throw new NoSuchStudentExamException(msg.toString());
	}

	/**
	 * Returns the last student exam in the ordered set where studentId = &#63;.
	 *
	 * @param studentId the student ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the last matching student exam, or <code>null</code> if a matching student exam could not be found
	 */
	@Override
	public StudentExam fetchBystudentId_Last(long studentId,
		OrderByComparator<StudentExam> orderByComparator) {
		int count = countBystudentId(studentId);

		if (count == 0) {
			return null;
		}

		List<StudentExam> list = findBystudentId(studentId, count - 1, count,
				orderByComparator);

		if (!list.isEmpty()) {
			return list.get(0);
		}

		return null;
	}

	/**
	 * Returns the student exams before and after the current student exam in the ordered set where studentId = &#63;.
	 *
	 * @param studentExamPK the primary key of the current student exam
	 * @param studentId the student ID
	 * @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	 * @return the previous, current, and next student exam
	 * @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	 */
	@Override
	public StudentExam[] findBystudentId_PrevAndNext(
		StudentExamPK studentExamPK, long studentId,
		OrderByComparator<StudentExam> orderByComparator)
		throws NoSuchStudentExamException {
		StudentExam studentExam = findByPrimaryKey(studentExamPK);

		Session session = null;

		try {
			session = openSession();

			StudentExam[] array = new StudentExamImpl[3];

			array[0] = getBystudentId_PrevAndNext(session, studentExam,
					studentId, orderByComparator, true);

			array[1] = studentExam;

			array[2] = getBystudentId_PrevAndNext(session, studentExam,
					studentId, orderByComparator, false);

			return array;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}

	protected StudentExam getBystudentId_PrevAndNext(Session session,
		StudentExam studentExam, long studentId,
		OrderByComparator<StudentExam> orderByComparator, boolean previous) {
		StringBundler query = null;

		if (orderByComparator != null) {
			query = new StringBundler(4 +
					(orderByComparator.getOrderByConditionFields().length * 3) +
					(orderByComparator.getOrderByFields().length * 3));
		}
		else {
			query = new StringBundler(3);
		}

		query.append(_SQL_SELECT_STUDENTEXAM_WHERE);

		query.append(_FINDER_COLUMN_STUDENTID_STUDENTID_2);

		if (orderByComparator != null) {
			String[] orderByConditionFields = orderByComparator.getOrderByConditionFields();

			if (orderByConditionFields.length > 0) {
				query.append(WHERE_AND);
			}

			for (int i = 0; i < orderByConditionFields.length; i++) {
				query.append(_ORDER_BY_ENTITY_ALIAS);
				query.append(orderByConditionFields[i]);

				if ((i + 1) < orderByConditionFields.length) {
					if (orderByComparator.isAscending() ^ previous) {
						query.append(WHERE_GREATER_THAN_HAS_NEXT);
					}
					else {
						query.append(WHERE_LESSER_THAN_HAS_NEXT);
					}
				}
				else {
					if (orderByComparator.isAscending() ^ previous) {
						query.append(WHERE_GREATER_THAN);
					}
					else {
						query.append(WHERE_LESSER_THAN);
					}
				}
			}

			query.append(ORDER_BY_CLAUSE);

			String[] orderByFields = orderByComparator.getOrderByFields();

			for (int i = 0; i < orderByFields.length; i++) {
				query.append(_ORDER_BY_ENTITY_ALIAS);
				query.append(orderByFields[i]);

				if ((i + 1) < orderByFields.length) {
					if (orderByComparator.isAscending() ^ previous) {
						query.append(ORDER_BY_ASC_HAS_NEXT);
					}
					else {
						query.append(ORDER_BY_DESC_HAS_NEXT);
					}
				}
				else {
					if (orderByComparator.isAscending() ^ previous) {
						query.append(ORDER_BY_ASC);
					}
					else {
						query.append(ORDER_BY_DESC);
					}
				}
			}
		}
		else {
			query.append(StudentExamModelImpl.ORDER_BY_JPQL);
		}

		String sql = query.toString();

		Query q = session.createQuery(sql);

		q.setFirstResult(0);
		q.setMaxResults(2);

		QueryPos qPos = QueryPos.getInstance(q);

		qPos.add(studentId);

		if (orderByComparator != null) {
			Object[] values = orderByComparator.getOrderByConditionValues(studentExam);

			for (Object value : values) {
				qPos.add(value);
			}
		}

		List<StudentExam> list = q.list();

		if (list.size() == 2) {
			return list.get(1);
		}
		else {
			return null;
		}
	}

	/**
	 * Removes all the student exams where studentId = &#63; from the database.
	 *
	 * @param studentId the student ID
	 */
	@Override
	public void removeBystudentId(long studentId) {
		for (StudentExam studentExam : findBystudentId(studentId,
				QueryUtil.ALL_POS, QueryUtil.ALL_POS, null)) {
			remove(studentExam);
		}
	}

	/**
	 * Returns the number of student exams where studentId = &#63;.
	 *
	 * @param studentId the student ID
	 * @return the number of matching student exams
	 */
	@Override
	public int countBystudentId(long studentId) {
		FinderPath finderPath = FINDER_PATH_COUNT_BY_STUDENTID;

		Object[] finderArgs = new Object[] { studentId };

		Long count = (Long)finderCache.getResult(finderPath, finderArgs, this);

		if (count == null) {
			StringBundler query = new StringBundler(2);

			query.append(_SQL_COUNT_STUDENTEXAM_WHERE);

			query.append(_FINDER_COLUMN_STUDENTID_STUDENTID_2);

			String sql = query.toString();

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				QueryPos qPos = QueryPos.getInstance(q);

				qPos.add(studentId);

				count = (Long)q.uniqueResult();

				finderCache.putResult(finderPath, finderArgs, count);
			}
			catch (Exception e) {
				finderCache.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return count.intValue();
	}

	private static final String _FINDER_COLUMN_STUDENTID_STUDENTID_2 = "studentExam.id.studentId = ?";

	public StudentExamPersistenceImpl() {
		setModelClass(StudentExam.class);
	}

	/**
	 * Caches the student exam in the entity cache if it is enabled.
	 *
	 * @param studentExam the student exam
	 */
	@Override
	public void cacheResult(StudentExam studentExam) {
		entityCache.putResult(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamImpl.class, studentExam.getPrimaryKey(), studentExam);

		studentExam.resetOriginalValues();
	}

	/**
	 * Caches the student exams in the entity cache if it is enabled.
	 *
	 * @param studentExams the student exams
	 */
	@Override
	public void cacheResult(List<StudentExam> studentExams) {
		for (StudentExam studentExam : studentExams) {
			if (entityCache.getResult(
						StudentExamModelImpl.ENTITY_CACHE_ENABLED,
						StudentExamImpl.class, studentExam.getPrimaryKey()) == null) {
				cacheResult(studentExam);
			}
			else {
				studentExam.resetOriginalValues();
			}
		}
	}

	/**
	 * Clears the cache for all student exams.
	 *
	 * <p>
	 * The {@link EntityCache} and {@link FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache() {
		entityCache.clearCache(StudentExamImpl.class);

		finderCache.clearCache(FINDER_CLASS_NAME_ENTITY);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	/**
	 * Clears the cache for the student exam.
	 *
	 * <p>
	 * The {@link EntityCache} and {@link FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache(StudentExam studentExam) {
		entityCache.removeResult(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamImpl.class, studentExam.getPrimaryKey());

		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	@Override
	public void clearCache(List<StudentExam> studentExams) {
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);

		for (StudentExam studentExam : studentExams) {
			entityCache.removeResult(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
				StudentExamImpl.class, studentExam.getPrimaryKey());
		}
	}

	/**
	 * Creates a new student exam with the primary key. Does not add the student exam to the database.
	 *
	 * @param studentExamPK the primary key for the new student exam
	 * @return the new student exam
	 */
	@Override
	public StudentExam create(StudentExamPK studentExamPK) {
		StudentExam studentExam = new StudentExamImpl();

		studentExam.setNew(true);
		studentExam.setPrimaryKey(studentExamPK);

		return studentExam;
	}

	/**
	 * Removes the student exam with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param studentExamPK the primary key of the student exam
	 * @return the student exam that was removed
	 * @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	 */
	@Override
	public StudentExam remove(StudentExamPK studentExamPK)
		throws NoSuchStudentExamException {
		return remove((Serializable)studentExamPK);
	}

	/**
	 * Removes the student exam with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param primaryKey the primary key of the student exam
	 * @return the student exam that was removed
	 * @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	 */
	@Override
	public StudentExam remove(Serializable primaryKey)
		throws NoSuchStudentExamException {
		Session session = null;

		try {
			session = openSession();

			StudentExam studentExam = (StudentExam)session.get(StudentExamImpl.class,
					primaryKey);

			if (studentExam == null) {
				if (_log.isDebugEnabled()) {
					_log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchStudentExamException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(studentExam);
		}
		catch (NoSuchStudentExamException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}

	@Override
	protected StudentExam removeImpl(StudentExam studentExam) {
		studentExam = toUnwrappedModel(studentExam);

		Session session = null;

		try {
			session = openSession();

			if (!session.contains(studentExam)) {
				studentExam = (StudentExam)session.get(StudentExamImpl.class,
						studentExam.getPrimaryKeyObj());
			}

			if (studentExam != null) {
				session.delete(studentExam);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		if (studentExam != null) {
			clearCache(studentExam);
		}

		return studentExam;
	}

	@Override
	public StudentExam updateImpl(StudentExam studentExam) {
		studentExam = toUnwrappedModel(studentExam);

		boolean isNew = studentExam.isNew();

		StudentExamModelImpl studentExamModelImpl = (StudentExamModelImpl)studentExam;

		Session session = null;

		try {
			session = openSession();

			if (studentExam.isNew()) {
				session.save(studentExam);

				studentExam.setNew(false);
			}
			else {
				studentExam = (StudentExam)session.merge(studentExam);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);

		if (isNew || !StudentExamModelImpl.COLUMN_BITMASK_ENABLED) {
			finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
		}

		else {
			if ((studentExamModelImpl.getColumnBitmask() &
					FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_EXAMRECORDID.getColumnBitmask()) != 0) {
				Object[] args = new Object[] {
						studentExamModelImpl.getOriginalExamRecordId()
					};

				finderCache.removeResult(FINDER_PATH_COUNT_BY_EXAMRECORDID, args);
				finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_EXAMRECORDID,
					args);

				args = new Object[] { studentExamModelImpl.getExamRecordId() };

				finderCache.removeResult(FINDER_PATH_COUNT_BY_EXAMRECORDID, args);
				finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_EXAMRECORDID,
					args);
			}

			if ((studentExamModelImpl.getColumnBitmask() &
					FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_STUDENTID.getColumnBitmask()) != 0) {
				Object[] args = new Object[] {
						studentExamModelImpl.getOriginalStudentId()
					};

				finderCache.removeResult(FINDER_PATH_COUNT_BY_STUDENTID, args);
				finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_STUDENTID,
					args);

				args = new Object[] { studentExamModelImpl.getStudentId() };

				finderCache.removeResult(FINDER_PATH_COUNT_BY_STUDENTID, args);
				finderCache.removeResult(FINDER_PATH_WITHOUT_PAGINATION_FIND_BY_STUDENTID,
					args);
			}
		}

		entityCache.putResult(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
			StudentExamImpl.class, studentExam.getPrimaryKey(), studentExam,
			false);

		studentExam.resetOriginalValues();

		return studentExam;
	}

	protected StudentExam toUnwrappedModel(StudentExam studentExam) {
		if (studentExam instanceof StudentExamImpl) {
			return studentExam;
		}

		StudentExamImpl studentExamImpl = new StudentExamImpl();

		studentExamImpl.setNew(studentExam.isNew());
		studentExamImpl.setPrimaryKey(studentExam.getPrimaryKey());

		studentExamImpl.setExamRecordId(studentExam.getExamRecordId());
		studentExamImpl.setStudentId(studentExam.getStudentId());
		studentExamImpl.setInProgress(studentExam.isInProgress());
		studentExamImpl.setDone(studentExam.isDone());

		return studentExamImpl;
	}

	/**
	 * Returns the student exam with the primary key or throws a {@link com.liferay.portal.kernel.exception.NoSuchModelException} if it could not be found.
	 *
	 * @param primaryKey the primary key of the student exam
	 * @return the student exam
	 * @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	 */
	@Override
	public StudentExam findByPrimaryKey(Serializable primaryKey)
		throws NoSuchStudentExamException {
		StudentExam studentExam = fetchByPrimaryKey(primaryKey);

		if (studentExam == null) {
			if (_log.isDebugEnabled()) {
				_log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
			}

			throw new NoSuchStudentExamException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
				primaryKey);
		}

		return studentExam;
	}

	/**
	 * Returns the student exam with the primary key or throws a {@link NoSuchStudentExamException} if it could not be found.
	 *
	 * @param studentExamPK the primary key of the student exam
	 * @return the student exam
	 * @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	 */
	@Override
	public StudentExam findByPrimaryKey(StudentExamPK studentExamPK)
		throws NoSuchStudentExamException {
		return findByPrimaryKey((Serializable)studentExamPK);
	}

	/**
	 * Returns the student exam with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param primaryKey the primary key of the student exam
	 * @return the student exam, or <code>null</code> if a student exam with the primary key could not be found
	 */
	@Override
	public StudentExam fetchByPrimaryKey(Serializable primaryKey) {
		Serializable serializable = entityCache.getResult(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
				StudentExamImpl.class, primaryKey);

		if (serializable == nullModel) {
			return null;
		}

		StudentExam studentExam = (StudentExam)serializable;

		if (studentExam == null) {
			Session session = null;

			try {
				session = openSession();

				studentExam = (StudentExam)session.get(StudentExamImpl.class,
						primaryKey);

				if (studentExam != null) {
					cacheResult(studentExam);
				}
				else {
					entityCache.putResult(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
						StudentExamImpl.class, primaryKey, nullModel);
				}
			}
			catch (Exception e) {
				entityCache.removeResult(StudentExamModelImpl.ENTITY_CACHE_ENABLED,
					StudentExamImpl.class, primaryKey);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return studentExam;
	}

	/**
	 * Returns the student exam with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param studentExamPK the primary key of the student exam
	 * @return the student exam, or <code>null</code> if a student exam with the primary key could not be found
	 */
	@Override
	public StudentExam fetchByPrimaryKey(StudentExamPK studentExamPK) {
		return fetchByPrimaryKey((Serializable)studentExamPK);
	}

	@Override
	public Map<Serializable, StudentExam> fetchByPrimaryKeys(
		Set<Serializable> primaryKeys) {
		if (primaryKeys.isEmpty()) {
			return Collections.emptyMap();
		}

		Map<Serializable, StudentExam> map = new HashMap<Serializable, StudentExam>();

		for (Serializable primaryKey : primaryKeys) {
			StudentExam studentExam = fetchByPrimaryKey(primaryKey);

			if (studentExam != null) {
				map.put(primaryKey, studentExam);
			}
		}

		return map;
	}

	/**
	 * Returns all the student exams.
	 *
	 * @return the student exams
	 */
	@Override
	public List<StudentExam> findAll() {
		return findAll(QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);
	}

	/**
	 * Returns a range of all the student exams.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of student exams
	 * @param end the upper bound of the range of student exams (not inclusive)
	 * @return the range of student exams
	 */
	@Override
	public List<StudentExam> findAll(int start, int end) {
		return findAll(start, end, null);
	}

	/**
	 * Returns an ordered range of all the student exams.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of student exams
	 * @param end the upper bound of the range of student exams (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of student exams
	 */
	@Override
	public List<StudentExam> findAll(int start, int end,
		OrderByComparator<StudentExam> orderByComparator) {
		return findAll(start, end, orderByComparator, true);
	}

	/**
	 * Returns an ordered range of all the student exams.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of student exams
	 * @param end the upper bound of the range of student exams (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @param retrieveFromCache whether to retrieve from the finder cache
	 * @return the ordered range of student exams
	 */
	@Override
	public List<StudentExam> findAll(int start, int end,
		OrderByComparator<StudentExam> orderByComparator,
		boolean retrieveFromCache) {
		boolean pagination = true;
		FinderPath finderPath = null;
		Object[] finderArgs = null;

		if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&
				(orderByComparator == null)) {
			pagination = false;
			finderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL;
			finderArgs = FINDER_ARGS_EMPTY;
		}
		else {
			finderPath = FINDER_PATH_WITH_PAGINATION_FIND_ALL;
			finderArgs = new Object[] { start, end, orderByComparator };
		}

		List<StudentExam> list = null;

		if (retrieveFromCache) {
			list = (List<StudentExam>)finderCache.getResult(finderPath,
					finderArgs, this);
		}

		if (list == null) {
			StringBundler query = null;
			String sql = null;

			if (orderByComparator != null) {
				query = new StringBundler(2 +
						(orderByComparator.getOrderByFields().length * 2));

				query.append(_SQL_SELECT_STUDENTEXAM);

				appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,
					orderByComparator);

				sql = query.toString();
			}
			else {
				sql = _SQL_SELECT_STUDENTEXAM;

				if (pagination) {
					sql = sql.concat(StudentExamModelImpl.ORDER_BY_JPQL);
				}
			}

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				if (!pagination) {
					list = (List<StudentExam>)QueryUtil.list(q, getDialect(),
							start, end, false);

					Collections.sort(list);

					list = Collections.unmodifiableList(list);
				}
				else {
					list = (List<StudentExam>)QueryUtil.list(q, getDialect(),
							start, end);
				}

				cacheResult(list);

				finderCache.putResult(finderPath, finderArgs, list);
			}
			catch (Exception e) {
				finderCache.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return list;
	}

	/**
	 * Removes all the student exams from the database.
	 *
	 */
	@Override
	public void removeAll() {
		for (StudentExam studentExam : findAll()) {
			remove(studentExam);
		}
	}

	/**
	 * Returns the number of student exams.
	 *
	 * @return the number of student exams
	 */
	@Override
	public int countAll() {
		Long count = (Long)finderCache.getResult(FINDER_PATH_COUNT_ALL,
				FINDER_ARGS_EMPTY, this);

		if (count == null) {
			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(_SQL_COUNT_STUDENTEXAM);

				count = (Long)q.uniqueResult();

				finderCache.putResult(FINDER_PATH_COUNT_ALL, FINDER_ARGS_EMPTY,
					count);
			}
			catch (Exception e) {
				finderCache.removeResult(FINDER_PATH_COUNT_ALL,
					FINDER_ARGS_EMPTY);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return count.intValue();
	}

	@Override
	protected Map<String, Integer> getTableColumnsMap() {
		return StudentExamModelImpl.TABLE_COLUMNS_MAP;
	}

	/**
	 * Initializes the student exam persistence.
	 */
	public void afterPropertiesSet() {
	}

	public void destroy() {
		entityCache.removeCache(StudentExamImpl.class.getName());
		finderCache.removeCache(FINDER_CLASS_NAME_ENTITY);
		finderCache.removeCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.removeCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	@ServiceReference(type = EntityCache.class)
	protected EntityCache entityCache;
	@ServiceReference(type = FinderCache.class)
	protected FinderCache finderCache;
	private static final String _SQL_SELECT_STUDENTEXAM = "SELECT studentExam FROM StudentExam studentExam";
	private static final String _SQL_SELECT_STUDENTEXAM_WHERE = "SELECT studentExam FROM StudentExam studentExam WHERE ";
	private static final String _SQL_COUNT_STUDENTEXAM = "SELECT COUNT(studentExam) FROM StudentExam studentExam";
	private static final String _SQL_COUNT_STUDENTEXAM_WHERE = "SELECT COUNT(studentExam) FROM StudentExam studentExam WHERE ";
	private static final String _ORDER_BY_ENTITY_ALIAS = "studentExam.";
	private static final String _NO_SUCH_ENTITY_WITH_PRIMARY_KEY = "No StudentExam exists with the primary key ";
	private static final String _NO_SUCH_ENTITY_WITH_KEY = "No StudentExam exists with the key {";
	private static final Log _log = LogFactoryUtil.getLog(StudentExamPersistenceImpl.class);
}
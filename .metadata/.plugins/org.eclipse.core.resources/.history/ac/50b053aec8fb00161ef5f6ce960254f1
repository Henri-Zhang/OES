/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package priv.barrow.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import priv.barrow.model.Teacher;
import priv.barrow.model.TeacherModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Teacher service. Represents a row in the &quot;OES_Teacher&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TeacherModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeacherImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TeacherImpl
 * @see Teacher
 * @see TeacherModel
 * @generated
 */
@ProviderType
public class TeacherModelImpl extends BaseModelImpl<Teacher>
	implements TeacherModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a teacher model instance should use the {@link Teacher} interface instead.
	 */
	public static final String TABLE_NAME = "OES_Teacher";
	public static final Object[][] TABLE_COLUMNS = {
			{ "teacherNumber", Types.BIGINT },
			{ "userId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("teacherNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table OES_Teacher (teacherNumber LONG not null primary key,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table OES_Teacher";
	public static final String ORDER_BY_JPQL = " ORDER BY teacher.teacherNumber ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OES_Teacher.teacherNumber ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(priv.barrow.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.priv.barrow.model.Teacher"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(priv.barrow.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.priv.barrow.model.Teacher"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(priv.barrow.service.util.ServiceProps.get(
				"lock.expiration.time.priv.barrow.model.Teacher"));

	public TeacherModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _teacherNumber;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTeacherNumber(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _teacherNumber;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Teacher.class;
	}

	@Override
	public String getModelClassName() {
		return Teacher.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("teacherNumber", getTeacherNumber());
		attributes.put("userId", getUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long teacherNumber = (Long)attributes.get("teacherNumber");

		if (teacherNumber != null) {
			setTeacherNumber(teacherNumber);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@Override
	public long getTeacherNumber() {
		return _teacherNumber;
	}

	@Override
	public void setTeacherNumber(long teacherNumber) {
		_teacherNumber = teacherNumber;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Teacher.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Teacher toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Teacher)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TeacherImpl teacherImpl = new TeacherImpl();

		teacherImpl.setTeacherNumber(getTeacherNumber());
		teacherImpl.setUserId(getUserId());

		teacherImpl.resetOriginalValues();

		return teacherImpl;
	}

	@Override
	public int compareTo(Teacher teacher) {
		long primaryKey = teacher.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Teacher)) {
			return false;
		}

		Teacher teacher = (Teacher)obj;

		long primaryKey = teacher.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Teacher> toCacheModel() {
		TeacherCacheModel teacherCacheModel = new TeacherCacheModel();

		teacherCacheModel.teacherNumber = getTeacherNumber();

		teacherCacheModel.userId = getUserId();

		return teacherCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{teacherNumber=");
		sb.append(getTeacherNumber());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("priv.barrow.model.Teacher");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>teacherNumber</column-name><column-value><![CDATA[");
		sb.append(getTeacherNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Teacher.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Teacher.class
		};
	private long _teacherNumber;
	private long _userId;
	private Teacher _escapedModel;
}
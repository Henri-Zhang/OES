package priv.barrow.oes.portlet.takeeaxm.controller;

import java.io.IOException;
import java.util.List;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.Portlet;
import javax.portlet.PortletException;
import javax.portlet.ProcessAction;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;
import javax.servlet.http.HttpServletRequest;

import org.osgi.service.component.annotations.Component;

import com.liferay.counter.kernel.service.CounterLocalServiceUtil;
import com.liferay.dynamic.data.lists.model.DDLRecord;
import com.liferay.dynamic.data.lists.service.DDLRecordLocalServiceUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.util.WebKeys;

import priv.barrow.model.ExamData;
import priv.barrow.model.StudentExamLink;
import priv.barrow.oes.portlet.constants.ExamConstants;
import priv.barrow.oes.portlet.constants.QuestionConstants;
import priv.barrow.oes.portlet.constants.StudentConstants;
import priv.barrow.oes.portlet.model.Exam;
import priv.barrow.oes.portlet.util.ExamUtil;
import priv.barrow.service.ExamDataLocalServiceUtil;
import priv.barrow.service.StudentExamLinkLocalServiceUtil;

@Component(
    immediate = true,
    property = {
        "com.liferay.portlet.display-category=Student",
        "com.liferay.portlet.instanceable=true",
        "com.liferay.portlet.ajaxable=true",
        "com.liferay.portlet.requires-namespaced-parameters=false",
        "javax.portlet.display-name=Take Exam",
        "javax.portlet.init-param.template-path=/",
        "com.liferay.portlet.footer-portlet-css=/css/takeexam/take_exam.css",
        "com.liferay.portlet.footer-portlet-javascript=/js/takeexam/take_exam.js",
        "javax.portlet.init-param.view-template=/html/takeexam/take_exam.jsp",
        "javax.portlet.resource-bundle=content.Language",
        "javax.portlet.security-role-ref=power-user,user"
    },
    service = Portlet.class
)

public class TakeExamPortlet extends MVCPortlet {

    private Log LOG = LogFactoryUtil.getLog(TakeExamPortlet.class);

    @Override
    public void doView(RenderRequest renderRequest, RenderResponse renderResponse)
            throws IOException, PortletException {
        ThemeDisplay themeDisplay = (ThemeDisplay) renderRequest.getAttribute(WebKeys.THEME_DISPLAY);
        long studentId = themeDisplay.getUserId();

        HttpServletRequest request =
                PortalUtil.getOriginalServletRequest(PortalUtil.getHttpServletRequest(renderRequest));
        long examId = ParamUtil.get(request, ExamConstants.EXAM_ID, ExamConstants.INEXISTENT_EXAM_ID);
        if (examId == ExamConstants.INEXISTENT_EXAM_ID) {
            throw new PortletException("No examId exist.");
        }

        StudentExamLink studentExamLink =
                StudentExamLinkLocalServiceUtil.findByExamRecordIdAndStudentId(examId, studentId).get(0);
        if (studentExamLink.getDone()) {
            throw new PortletException(
                    String.format("This exam have completed. examId: [%d], studentId: [%d]", examId, studentId));
        }

        DDLRecord examRecord = null;
        try {
            examRecord = DDLRecordLocalServiceUtil.getDDLRecord(examId);
        } catch (PortalException e) {
            LOG.error(String.format("Get exam record by id failed. eaxmId: [%d]", examId), e);
        }

        Exam exam = ExamUtil.getExam(examRecord);

        renderRequest.setAttribute(ExamConstants.EXAM, exam);
        renderRequest.setAttribute(StudentConstants.STUDENT_ID, studentId);

        super.doView(renderRequest, renderResponse);
    }

    @ProcessAction(name = "submit")
    public void submit(ActionRequest actionRequest, ActionResponse actionResponse) {
        long examId = ParamUtil.getLong(actionRequest, ExamConstants.EXAM_ID, ExamConstants.INEXISTENT_EXAM_ID);
        if (examId == ExamConstants.INEXISTENT_EXAM_ID) {
            LOG.warn("No examId parameter, can't submit exam.");
            return;
        }

        long studentId = PortalUtil.getUserId(actionRequest);
        StudentExamLink studentExamLink = null;
        try {
            StudentExamLink studentExamLink =
                    StudentExamLinkLocalServiceUtil.findByExamRecordIdAndStudentId(examId, studentId).get(0);
        } catch (NullPointerException e) {
            LOG.error(String.format("Can't get StudentExamLink by examId: [%d] and studentId: [%d].",
                    examId, studentId));
        }



    }

    @Override
    public void serveResource(ResourceRequest resourceRequest, ResourceResponse resourceResponse)
            throws IOException, PortletException {
        ThemeDisplay themeDisplay = (ThemeDisplay) resourceRequest.getAttribute(WebKeys.THEME_DISPLAY);
        long userId = themeDisplay.getUserId();

        long examId = ParamUtil.getLong(resourceRequest, ExamConstants.EXAM_ID, ExamConstants.INEXISTENT_EXAM_ID);
        long studentId = ParamUtil.getLong(resourceRequest,
                StudentConstants.STUDENT_ID, StudentConstants.INEXISTENT_STUDENT_ID);
        long questionOrder = ParamUtil.getLong(resourceRequest,
                QuestionConstants.QUESTION_ORDER, QuestionConstants.INEXISTENT_QUESTION_ORDER);
        String result = ParamUtil.getString(resourceRequest, QuestionConstants.RESULT, StringPool.BLANK);

        if (studentId != userId) {
            throw new PortletException("Not current user.");
        }

        if (examId == ExamConstants.INEXISTENT_EXAM_ID || studentId == StudentConstants.INEXISTENT_STUDENT_ID ||
                questionOrder == QuestionConstants.INEXISTENT_QUESTION_ORDER || Validator.isBlank(result)) {
            throw new PortletException("Parameters error.");
        }

        List<ExamData> examDatas =
                ExamDataLocalServiceUtil.findByExamIdAndStudentIdAndQuestionOrder(examId, studentId, questionOrder);

        if (examDatas.isEmpty()) {
            ExamData examData = ExamDataLocalServiceUtil.createExamData(CounterLocalServiceUtil.increment());
            examData.setExamId(examId);
            examData.setStudentId(studentId);
            examData.setQuestionOrder(questionOrder);
            examData.setResult(result);

            ExamDataLocalServiceUtil.addExamData(examData);
        } else {
            ExamData examData = examDatas.get(0);
            examData.setResult(result);

            ExamDataLocalServiceUtil.updateExamData(examData);
        }

        super.serveResource(resourceRequest, resourceResponse);
    }

}

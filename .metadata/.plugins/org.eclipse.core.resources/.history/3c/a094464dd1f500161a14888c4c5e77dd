/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package oes.service.service.persistence;

import aQute.bnd.annotation.ProviderType;

import com.liferay.osgi.util.ServiceTrackerFactory;

import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.OrderByComparator;

import oes.service.model.OESQuestion;

import org.osgi.util.tracker.ServiceTracker;

import java.util.List;

/**
 * The persistence utility for the oes question service. This utility wraps {@link oes.service.service.persistence.impl.OESQuestionPersistenceImpl} and provides direct access to the database for CRUD operations. This utility should only be used by the service layer, as it must operate within a transaction. Never access this utility in a JSP, controller, model, or other front-end class.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OESQuestionPersistence
 * @see oes.service.service.persistence.impl.OESQuestionPersistenceImpl
 * @generated
 */
@ProviderType
public class OESQuestionUtil {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify this class directly. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
	 */

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#clearCache()
	 */
	public static void clearCache() {
		getPersistence().clearCache();
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#clearCache(com.liferay.portal.kernel.model.BaseModel)
	 */
	public static void clearCache(OESQuestion oesQuestion) {
		getPersistence().clearCache(oesQuestion);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#countWithDynamicQuery(DynamicQuery)
	 */
	public static long countWithDynamicQuery(DynamicQuery dynamicQuery) {
		return getPersistence().countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery)
	 */
	public static List<OESQuestion> findWithDynamicQuery(
		DynamicQuery dynamicQuery) {
		return getPersistence().findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery, int, int)
	 */
	public static List<OESQuestion> findWithDynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {
		return getPersistence().findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery, int, int, OrderByComparator)
	 */
	public static List<OESQuestion> findWithDynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<OESQuestion> orderByComparator) {
		return getPersistence()
				   .findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#update(com.liferay.portal.kernel.model.BaseModel)
	 */
	public static OESQuestion update(OESQuestion oesQuestion) {
		return getPersistence().update(oesQuestion);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#update(com.liferay.portal.kernel.model.BaseModel, ServiceContext)
	 */
	public static OESQuestion update(OESQuestion oesQuestion,
		ServiceContext serviceContext) {
		return getPersistence().update(oesQuestion, serviceContext);
	}

	/**
	* Caches the oes question in the entity cache if it is enabled.
	*
	* @param oesQuestion the oes question
	*/
	public static void cacheResult(OESQuestion oesQuestion) {
		getPersistence().cacheResult(oesQuestion);
	}

	/**
	* Caches the oes questions in the entity cache if it is enabled.
	*
	* @param oesQuestions the oes questions
	*/
	public static void cacheResult(List<OESQuestion> oesQuestions) {
		getPersistence().cacheResult(oesQuestions);
	}

	/**
	* Creates a new oes question with the primary key. Does not add the oes question to the database.
	*
	* @param questionSid the primary key for the new oes question
	* @return the new oes question
	*/
	public static OESQuestion create(long questionSid) {
		return getPersistence().create(questionSid);
	}

	/**
	* Removes the oes question with the primary key from the database. Also notifies the appropriate model listeners.
	*
	* @param questionSid the primary key of the oes question
	* @return the oes question that was removed
	* @throws NoSuchOESQuestionException if a oes question with the primary key could not be found
	*/
	public static OESQuestion remove(long questionSid)
		throws oes.service.exception.NoSuchOESQuestionException {
		return getPersistence().remove(questionSid);
	}

	public static OESQuestion updateImpl(OESQuestion oesQuestion) {
		return getPersistence().updateImpl(oesQuestion);
	}

	/**
	* Returns the oes question with the primary key or throws a {@link NoSuchOESQuestionException} if it could not be found.
	*
	* @param questionSid the primary key of the oes question
	* @return the oes question
	* @throws NoSuchOESQuestionException if a oes question with the primary key could not be found
	*/
	public static OESQuestion findByPrimaryKey(long questionSid)
		throws oes.service.exception.NoSuchOESQuestionException {
		return getPersistence().findByPrimaryKey(questionSid);
	}

	/**
	* Returns the oes question with the primary key or returns <code>null</code> if it could not be found.
	*
	* @param questionSid the primary key of the oes question
	* @return the oes question, or <code>null</code> if a oes question with the primary key could not be found
	*/
	public static OESQuestion fetchByPrimaryKey(long questionSid) {
		return getPersistence().fetchByPrimaryKey(questionSid);
	}

	public static java.util.Map<java.io.Serializable, OESQuestion> fetchByPrimaryKeys(
		java.util.Set<java.io.Serializable> primaryKeys) {
		return getPersistence().fetchByPrimaryKeys(primaryKeys);
	}

	/**
	* Returns all the oes questions.
	*
	* @return the oes questions
	*/
	public static List<OESQuestion> findAll() {
		return getPersistence().findAll();
	}

	/**
	* Returns a range of all the oes questions.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of oes questions
	* @param end the upper bound of the range of oes questions (not inclusive)
	* @return the range of oes questions
	*/
	public static List<OESQuestion> findAll(int start, int end) {
		return getPersistence().findAll(start, end);
	}

	/**
	* Returns an ordered range of all the oes questions.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of oes questions
	* @param end the upper bound of the range of oes questions (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of oes questions
	*/
	public static List<OESQuestion> findAll(int start, int end,
		OrderByComparator<OESQuestion> orderByComparator) {
		return getPersistence().findAll(start, end, orderByComparator);
	}

	/**
	* Returns an ordered range of all the oes questions.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of oes questions
	* @param end the upper bound of the range of oes questions (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @param retrieveFromCache whether to retrieve from the finder cache
	* @return the ordered range of oes questions
	*/
	public static List<OESQuestion> findAll(int start, int end,
		OrderByComparator<OESQuestion> orderByComparator,
		boolean retrieveFromCache) {
		return getPersistence()
				   .findAll(start, end, orderByComparator, retrieveFromCache);
	}

	/**
	* Removes all the oes questions from the database.
	*/
	public static void removeAll() {
		getPersistence().removeAll();
	}

	/**
	* Returns the number of oes questions.
	*
	* @return the number of oes questions
	*/
	public static int countAll() {
		return getPersistence().countAll();
	}

	public static OESQuestionPersistence getPersistence() {
		return _serviceTracker.getService();
	}

	private static ServiceTracker<OESQuestionPersistence, OESQuestionPersistence> _serviceTracker =
		ServiceTrackerFactory.open(OESQuestionPersistence.class);
}
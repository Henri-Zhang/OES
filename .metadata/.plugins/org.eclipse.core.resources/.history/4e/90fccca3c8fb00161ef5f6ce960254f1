/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package priv.barrow.service.persistence;

import aQute.bnd.annotation.ProviderType;

import com.liferay.osgi.util.ServiceTrackerFactory;

import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.OrderByComparator;

import org.osgi.util.tracker.ServiceTracker;

import priv.barrow.model.Teacher;

import java.util.List;

/**
 * The persistence utility for the teacher service. This utility wraps {@link priv.barrow.service.persistence.impl.TeacherPersistenceImpl} and provides direct access to the database for CRUD operations. This utility should only be used by the service layer, as it must operate within a transaction. Never access this utility in a JSP, controller, model, or other front-end class.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TeacherPersistence
 * @see priv.barrow.service.persistence.impl.TeacherPersistenceImpl
 * @generated
 */
@ProviderType
public class TeacherUtil {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify this class directly. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
	 */

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#clearCache()
	 */
	public static void clearCache() {
		getPersistence().clearCache();
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#clearCache(com.liferay.portal.kernel.model.BaseModel)
	 */
	public static void clearCache(Teacher teacher) {
		getPersistence().clearCache(teacher);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#countWithDynamicQuery(DynamicQuery)
	 */
	public static long countWithDynamicQuery(DynamicQuery dynamicQuery) {
		return getPersistence().countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery)
	 */
	public static List<Teacher> findWithDynamicQuery(DynamicQuery dynamicQuery) {
		return getPersistence().findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery, int, int)
	 */
	public static List<Teacher> findWithDynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {
		return getPersistence().findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery, int, int, OrderByComparator)
	 */
	public static List<Teacher> findWithDynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<Teacher> orderByComparator) {
		return getPersistence()
				   .findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#update(com.liferay.portal.kernel.model.BaseModel)
	 */
	public static Teacher update(Teacher teacher) {
		return getPersistence().update(teacher);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#update(com.liferay.portal.kernel.model.BaseModel, ServiceContext)
	 */
	public static Teacher update(Teacher teacher, ServiceContext serviceContext) {
		return getPersistence().update(teacher, serviceContext);
	}

	/**
	* Caches the teacher in the entity cache if it is enabled.
	*
	* @param teacher the teacher
	*/
	public static void cacheResult(Teacher teacher) {
		getPersistence().cacheResult(teacher);
	}

	/**
	* Caches the teachers in the entity cache if it is enabled.
	*
	* @param teachers the teachers
	*/
	public static void cacheResult(List<Teacher> teachers) {
		getPersistence().cacheResult(teachers);
	}

	/**
	* Creates a new teacher with the primary key. Does not add the teacher to the database.
	*
	* @param teacherNumber the primary key for the new teacher
	* @return the new teacher
	*/
	public static Teacher create(long teacherNumber) {
		return getPersistence().create(teacherNumber);
	}

	/**
	* Removes the teacher with the primary key from the database. Also notifies the appropriate model listeners.
	*
	* @param teacherNumber the primary key of the teacher
	* @return the teacher that was removed
	* @throws NoSuchTeacherException if a teacher with the primary key could not be found
	*/
	public static Teacher remove(long teacherNumber)
		throws priv.barrow.exception.NoSuchTeacherException {
		return getPersistence().remove(teacherNumber);
	}

	public static Teacher updateImpl(Teacher teacher) {
		return getPersistence().updateImpl(teacher);
	}

	/**
	* Returns the teacher with the primary key or throws a {@link NoSuchTeacherException} if it could not be found.
	*
	* @param teacherNumber the primary key of the teacher
	* @return the teacher
	* @throws NoSuchTeacherException if a teacher with the primary key could not be found
	*/
	public static Teacher findByPrimaryKey(long teacherNumber)
		throws priv.barrow.exception.NoSuchTeacherException {
		return getPersistence().findByPrimaryKey(teacherNumber);
	}

	/**
	* Returns the teacher with the primary key or returns <code>null</code> if it could not be found.
	*
	* @param teacherNumber the primary key of the teacher
	* @return the teacher, or <code>null</code> if a teacher with the primary key could not be found
	*/
	public static Teacher fetchByPrimaryKey(long teacherNumber) {
		return getPersistence().fetchByPrimaryKey(teacherNumber);
	}

	public static java.util.Map<java.io.Serializable, Teacher> fetchByPrimaryKeys(
		java.util.Set<java.io.Serializable> primaryKeys) {
		return getPersistence().fetchByPrimaryKeys(primaryKeys);
	}

	/**
	* Returns all the teachers.
	*
	* @return the teachers
	*/
	public static List<Teacher> findAll() {
		return getPersistence().findAll();
	}

	/**
	* Returns a range of all the teachers.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link TeacherModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of teachers
	* @param end the upper bound of the range of teachers (not inclusive)
	* @return the range of teachers
	*/
	public static List<Teacher> findAll(int start, int end) {
		return getPersistence().findAll(start, end);
	}

	/**
	* Returns an ordered range of all the teachers.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link TeacherModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of teachers
	* @param end the upper bound of the range of teachers (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of teachers
	*/
	public static List<Teacher> findAll(int start, int end,
		OrderByComparator<Teacher> orderByComparator) {
		return getPersistence().findAll(start, end, orderByComparator);
	}

	/**
	* Returns an ordered range of all the teachers.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link TeacherModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of teachers
	* @param end the upper bound of the range of teachers (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @param retrieveFromCache whether to retrieve from the finder cache
	* @return the ordered range of teachers
	*/
	public static List<Teacher> findAll(int start, int end,
		OrderByComparator<Teacher> orderByComparator, boolean retrieveFromCache) {
		return getPersistence()
				   .findAll(start, end, orderByComparator, retrieveFromCache);
	}

	/**
	* Removes all the teachers from the database.
	*/
	public static void removeAll() {
		getPersistence().removeAll();
	}

	/**
	* Returns the number of teachers.
	*
	* @return the number of teachers
	*/
	public static int countAll() {
		return getPersistence().countAll();
	}

	public static TeacherPersistence getPersistence() {
		return _serviceTracker.getService();
	}

	private static ServiceTracker<TeacherPersistence, TeacherPersistence> _serviceTracker =
		ServiceTrackerFactory.open(TeacherPersistence.class);
}
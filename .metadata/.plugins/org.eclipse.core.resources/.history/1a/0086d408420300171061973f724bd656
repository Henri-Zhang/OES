/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package priv.barrow.service.persistence;

import aQute.bnd.annotation.ProviderType;

import com.liferay.osgi.util.ServiceTrackerFactory;

import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.OrderByComparator;

import org.osgi.util.tracker.ServiceTracker;

import priv.barrow.model.StudentExam;

import java.util.List;

/**
 * The persistence utility for the student exam service. This utility wraps {@link priv.barrow.service.persistence.impl.StudentExamPersistenceImpl} and provides direct access to the database for CRUD operations. This utility should only be used by the service layer, as it must operate within a transaction. Never access this utility in a JSP, controller, model, or other front-end class.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see StudentExamPersistence
 * @see priv.barrow.service.persistence.impl.StudentExamPersistenceImpl
 * @generated
 */
@ProviderType
public class StudentExamUtil {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify this class directly. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
	 */

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#clearCache()
	 */
	public static void clearCache() {
		getPersistence().clearCache();
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#clearCache(com.liferay.portal.kernel.model.BaseModel)
	 */
	public static void clearCache(StudentExam studentExam) {
		getPersistence().clearCache(studentExam);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#countWithDynamicQuery(DynamicQuery)
	 */
	public static long countWithDynamicQuery(DynamicQuery dynamicQuery) {
		return getPersistence().countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery)
	 */
	public static List<StudentExam> findWithDynamicQuery(
		DynamicQuery dynamicQuery) {
		return getPersistence().findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery, int, int)
	 */
	public static List<StudentExam> findWithDynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {
		return getPersistence().findWithDynamicQuery(dynamicQuery, start, end);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#findWithDynamicQuery(DynamicQuery, int, int, OrderByComparator)
	 */
	public static List<StudentExam> findWithDynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<StudentExam> orderByComparator) {
		return getPersistence()
				   .findWithDynamicQuery(dynamicQuery, start, end,
			orderByComparator);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#update(com.liferay.portal.kernel.model.BaseModel)
	 */
	public static StudentExam update(StudentExam studentExam) {
		return getPersistence().update(studentExam);
	}

	/**
	 * @see com.liferay.portal.kernel.service.persistence.BasePersistence#update(com.liferay.portal.kernel.model.BaseModel, ServiceContext)
	 */
	public static StudentExam update(StudentExam studentExam,
		ServiceContext serviceContext) {
		return getPersistence().update(studentExam, serviceContext);
	}

	/**
	* Returns all the student exams where examRecordId = &#63;.
	*
	* @param examRecordId the exam record ID
	* @return the matching student exams
	*/
	public static List<StudentExam> findByexamRecordId(long examRecordId) {
		return getPersistence().findByexamRecordId(examRecordId);
	}

	/**
	* Returns a range of all the student exams where examRecordId = &#63;.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param examRecordId the exam record ID
	* @param start the lower bound of the range of student exams
	* @param end the upper bound of the range of student exams (not inclusive)
	* @return the range of matching student exams
	*/
	public static List<StudentExam> findByexamRecordId(long examRecordId,
		int start, int end) {
		return getPersistence().findByexamRecordId(examRecordId, start, end);
	}

	/**
	* Returns an ordered range of all the student exams where examRecordId = &#63;.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param examRecordId the exam record ID
	* @param start the lower bound of the range of student exams
	* @param end the upper bound of the range of student exams (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of matching student exams
	*/
	public static List<StudentExam> findByexamRecordId(long examRecordId,
		int start, int end, OrderByComparator<StudentExam> orderByComparator) {
		return getPersistence()
				   .findByexamRecordId(examRecordId, start, end,
			orderByComparator);
	}

	/**
	* Returns an ordered range of all the student exams where examRecordId = &#63;.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param examRecordId the exam record ID
	* @param start the lower bound of the range of student exams
	* @param end the upper bound of the range of student exams (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @param retrieveFromCache whether to retrieve from the finder cache
	* @return the ordered range of matching student exams
	*/
	public static List<StudentExam> findByexamRecordId(long examRecordId,
		int start, int end, OrderByComparator<StudentExam> orderByComparator,
		boolean retrieveFromCache) {
		return getPersistence()
				   .findByexamRecordId(examRecordId, start, end,
			orderByComparator, retrieveFromCache);
	}

	/**
	* Returns the first student exam in the ordered set where examRecordId = &#63;.
	*
	* @param examRecordId the exam record ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the first matching student exam
	* @throws NoSuchStudentExamException if a matching student exam could not be found
	*/
	public static StudentExam findByexamRecordId_First(long examRecordId,
		OrderByComparator<StudentExam> orderByComparator)
		throws priv.barrow.exception.NoSuchStudentExamException {
		return getPersistence()
				   .findByexamRecordId_First(examRecordId, orderByComparator);
	}

	/**
	* Returns the first student exam in the ordered set where examRecordId = &#63;.
	*
	* @param examRecordId the exam record ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the first matching student exam, or <code>null</code> if a matching student exam could not be found
	*/
	public static StudentExam fetchByexamRecordId_First(long examRecordId,
		OrderByComparator<StudentExam> orderByComparator) {
		return getPersistence()
				   .fetchByexamRecordId_First(examRecordId, orderByComparator);
	}

	/**
	* Returns the last student exam in the ordered set where examRecordId = &#63;.
	*
	* @param examRecordId the exam record ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the last matching student exam
	* @throws NoSuchStudentExamException if a matching student exam could not be found
	*/
	public static StudentExam findByexamRecordId_Last(long examRecordId,
		OrderByComparator<StudentExam> orderByComparator)
		throws priv.barrow.exception.NoSuchStudentExamException {
		return getPersistence()
				   .findByexamRecordId_Last(examRecordId, orderByComparator);
	}

	/**
	* Returns the last student exam in the ordered set where examRecordId = &#63;.
	*
	* @param examRecordId the exam record ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the last matching student exam, or <code>null</code> if a matching student exam could not be found
	*/
	public static StudentExam fetchByexamRecordId_Last(long examRecordId,
		OrderByComparator<StudentExam> orderByComparator) {
		return getPersistence()
				   .fetchByexamRecordId_Last(examRecordId, orderByComparator);
	}

	/**
	* Returns the student exams before and after the current student exam in the ordered set where examRecordId = &#63;.
	*
	* @param studentExamPK the primary key of the current student exam
	* @param examRecordId the exam record ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the previous, current, and next student exam
	* @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	*/
	public static StudentExam[] findByexamRecordId_PrevAndNext(
		priv.barrow.service.persistence.StudentExamPK studentExamPK,
		long examRecordId, OrderByComparator<StudentExam> orderByComparator)
		throws priv.barrow.exception.NoSuchStudentExamException {
		return getPersistence()
				   .findByexamRecordId_PrevAndNext(studentExamPK, examRecordId,
			orderByComparator);
	}

	/**
	* Removes all the student exams where examRecordId = &#63; from the database.
	*
	* @param examRecordId the exam record ID
	*/
	public static void removeByexamRecordId(long examRecordId) {
		getPersistence().removeByexamRecordId(examRecordId);
	}

	/**
	* Returns the number of student exams where examRecordId = &#63;.
	*
	* @param examRecordId the exam record ID
	* @return the number of matching student exams
	*/
	public static int countByexamRecordId(long examRecordId) {
		return getPersistence().countByexamRecordId(examRecordId);
	}

	/**
	* Returns all the student exams where studentId = &#63;.
	*
	* @param studentId the student ID
	* @return the matching student exams
	*/
	public static List<StudentExam> findBystudentId(long studentId) {
		return getPersistence().findBystudentId(studentId);
	}

	/**
	* Returns a range of all the student exams where studentId = &#63;.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param studentId the student ID
	* @param start the lower bound of the range of student exams
	* @param end the upper bound of the range of student exams (not inclusive)
	* @return the range of matching student exams
	*/
	public static List<StudentExam> findBystudentId(long studentId, int start,
		int end) {
		return getPersistence().findBystudentId(studentId, start, end);
	}

	/**
	* Returns an ordered range of all the student exams where studentId = &#63;.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param studentId the student ID
	* @param start the lower bound of the range of student exams
	* @param end the upper bound of the range of student exams (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of matching student exams
	*/
	public static List<StudentExam> findBystudentId(long studentId, int start,
		int end, OrderByComparator<StudentExam> orderByComparator) {
		return getPersistence()
				   .findBystudentId(studentId, start, end, orderByComparator);
	}

	/**
	* Returns an ordered range of all the student exams where studentId = &#63;.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param studentId the student ID
	* @param start the lower bound of the range of student exams
	* @param end the upper bound of the range of student exams (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @param retrieveFromCache whether to retrieve from the finder cache
	* @return the ordered range of matching student exams
	*/
	public static List<StudentExam> findBystudentId(long studentId, int start,
		int end, OrderByComparator<StudentExam> orderByComparator,
		boolean retrieveFromCache) {
		return getPersistence()
				   .findBystudentId(studentId, start, end, orderByComparator,
			retrieveFromCache);
	}

	/**
	* Returns the first student exam in the ordered set where studentId = &#63;.
	*
	* @param studentId the student ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the first matching student exam
	* @throws NoSuchStudentExamException if a matching student exam could not be found
	*/
	public static StudentExam findBystudentId_First(long studentId,
		OrderByComparator<StudentExam> orderByComparator)
		throws priv.barrow.exception.NoSuchStudentExamException {
		return getPersistence()
				   .findBystudentId_First(studentId, orderByComparator);
	}

	/**
	* Returns the first student exam in the ordered set where studentId = &#63;.
	*
	* @param studentId the student ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the first matching student exam, or <code>null</code> if a matching student exam could not be found
	*/
	public static StudentExam fetchBystudentId_First(long studentId,
		OrderByComparator<StudentExam> orderByComparator) {
		return getPersistence()
				   .fetchBystudentId_First(studentId, orderByComparator);
	}

	/**
	* Returns the last student exam in the ordered set where studentId = &#63;.
	*
	* @param studentId the student ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the last matching student exam
	* @throws NoSuchStudentExamException if a matching student exam could not be found
	*/
	public static StudentExam findBystudentId_Last(long studentId,
		OrderByComparator<StudentExam> orderByComparator)
		throws priv.barrow.exception.NoSuchStudentExamException {
		return getPersistence()
				   .findBystudentId_Last(studentId, orderByComparator);
	}

	/**
	* Returns the last student exam in the ordered set where studentId = &#63;.
	*
	* @param studentId the student ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the last matching student exam, or <code>null</code> if a matching student exam could not be found
	*/
	public static StudentExam fetchBystudentId_Last(long studentId,
		OrderByComparator<StudentExam> orderByComparator) {
		return getPersistence()
				   .fetchBystudentId_Last(studentId, orderByComparator);
	}

	/**
	* Returns the student exams before and after the current student exam in the ordered set where studentId = &#63;.
	*
	* @param studentExamPK the primary key of the current student exam
	* @param studentId the student ID
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the previous, current, and next student exam
	* @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	*/
	public static StudentExam[] findBystudentId_PrevAndNext(
		priv.barrow.service.persistence.StudentExamPK studentExamPK,
		long studentId, OrderByComparator<StudentExam> orderByComparator)
		throws priv.barrow.exception.NoSuchStudentExamException {
		return getPersistence()
				   .findBystudentId_PrevAndNext(studentExamPK, studentId,
			orderByComparator);
	}

	/**
	* Removes all the student exams where studentId = &#63; from the database.
	*
	* @param studentId the student ID
	*/
	public static void removeBystudentId(long studentId) {
		getPersistence().removeBystudentId(studentId);
	}

	/**
	* Returns the number of student exams where studentId = &#63;.
	*
	* @param studentId the student ID
	* @return the number of matching student exams
	*/
	public static int countBystudentId(long studentId) {
		return getPersistence().countBystudentId(studentId);
	}

	/**
	* Caches the student exam in the entity cache if it is enabled.
	*
	* @param studentExam the student exam
	*/
	public static void cacheResult(StudentExam studentExam) {
		getPersistence().cacheResult(studentExam);
	}

	/**
	* Caches the student exams in the entity cache if it is enabled.
	*
	* @param studentExams the student exams
	*/
	public static void cacheResult(List<StudentExam> studentExams) {
		getPersistence().cacheResult(studentExams);
	}

	/**
	* Creates a new student exam with the primary key. Does not add the student exam to the database.
	*
	* @param studentExamPK the primary key for the new student exam
	* @return the new student exam
	*/
	public static StudentExam create(
		priv.barrow.service.persistence.StudentExamPK studentExamPK) {
		return getPersistence().create(studentExamPK);
	}

	/**
	* Removes the student exam with the primary key from the database. Also notifies the appropriate model listeners.
	*
	* @param studentExamPK the primary key of the student exam
	* @return the student exam that was removed
	* @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	*/
	public static StudentExam remove(
		priv.barrow.service.persistence.StudentExamPK studentExamPK)
		throws priv.barrow.exception.NoSuchStudentExamException {
		return getPersistence().remove(studentExamPK);
	}

	public static StudentExam updateImpl(StudentExam studentExam) {
		return getPersistence().updateImpl(studentExam);
	}

	/**
	* Returns the student exam with the primary key or throws a {@link NoSuchStudentExamException} if it could not be found.
	*
	* @param studentExamPK the primary key of the student exam
	* @return the student exam
	* @throws NoSuchStudentExamException if a student exam with the primary key could not be found
	*/
	public static StudentExam findByPrimaryKey(
		priv.barrow.service.persistence.StudentExamPK studentExamPK)
		throws priv.barrow.exception.NoSuchStudentExamException {
		return getPersistence().findByPrimaryKey(studentExamPK);
	}

	/**
	* Returns the student exam with the primary key or returns <code>null</code> if it could not be found.
	*
	* @param studentExamPK the primary key of the student exam
	* @return the student exam, or <code>null</code> if a student exam with the primary key could not be found
	*/
	public static StudentExam fetchByPrimaryKey(
		priv.barrow.service.persistence.StudentExamPK studentExamPK) {
		return getPersistence().fetchByPrimaryKey(studentExamPK);
	}

	public static java.util.Map<java.io.Serializable, StudentExam> fetchByPrimaryKeys(
		java.util.Set<java.io.Serializable> primaryKeys) {
		return getPersistence().fetchByPrimaryKeys(primaryKeys);
	}

	/**
	* Returns all the student exams.
	*
	* @return the student exams
	*/
	public static List<StudentExam> findAll() {
		return getPersistence().findAll();
	}

	/**
	* Returns a range of all the student exams.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of student exams
	* @param end the upper bound of the range of student exams (not inclusive)
	* @return the range of student exams
	*/
	public static List<StudentExam> findAll(int start, int end) {
		return getPersistence().findAll(start, end);
	}

	/**
	* Returns an ordered range of all the student exams.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of student exams
	* @param end the upper bound of the range of student exams (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of student exams
	*/
	public static List<StudentExam> findAll(int start, int end,
		OrderByComparator<StudentExam> orderByComparator) {
		return getPersistence().findAll(start, end, orderByComparator);
	}

	/**
	* Returns an ordered range of all the student exams.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link StudentExamModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of student exams
	* @param end the upper bound of the range of student exams (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @param retrieveFromCache whether to retrieve from the finder cache
	* @return the ordered range of student exams
	*/
	public static List<StudentExam> findAll(int start, int end,
		OrderByComparator<StudentExam> orderByComparator,
		boolean retrieveFromCache) {
		return getPersistence()
				   .findAll(start, end, orderByComparator, retrieveFromCache);
	}

	/**
	* Removes all the student exams from the database.
	*/
	public static void removeAll() {
		getPersistence().removeAll();
	}

	/**
	* Returns the number of student exams.
	*
	* @return the number of student exams
	*/
	public static int countAll() {
		return getPersistence().countAll();
	}

	public static StudentExamPersistence getPersistence() {
		return _serviceTracker.getService();
	}

	private static ServiceTracker<StudentExamPersistence, StudentExamPersistence> _serviceTracker =
		ServiceTrackerFactory.open(StudentExamPersistence.class);
}
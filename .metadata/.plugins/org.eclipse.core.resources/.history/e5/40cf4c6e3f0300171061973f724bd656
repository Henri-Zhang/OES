package priv.barrow.oes.portlet.studentdashboard.controller;

import java.io.IOException;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import javax.portlet.Portlet;
import javax.portlet.PortletException;
import javax.portlet.ProcessAction;
import javax.portlet.RenderRequest;
import javax.portlet.RenderResponse;

import org.osgi.service.component.annotations.Component;

import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCPortlet;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.util.WebKeys;

import priv.barrow.exception.NoSuchStudentTeacherLinkException;
import priv.barrow.model.StudentTeacherLink;
import priv.barrow.oes.portlet.studentdashboard.constants.Constants;
import priv.barrow.oes.portlet.util.StudentUtil;
import priv.barrow.service.StudentTeacherLinkLocalServiceUtil;

@Component(
    immediate = true,
    property = {
        "com.liferay.portlet.display-category=Student",
        "com.liferay.portlet.instanceable=true",
        "javax.portlet.display-name=Student Dashboard",
        "javax.portlet.init-param.template-path=/",
        "com.liferay.portlet.header-portlet-css=/css/studentdashboard/student_dashboard.css",
        "com.liferay.portlet.footer-portlet-javascript=/js/studentdashboard/student_dashboard.js",
        "javax.portlet.init-param.view-template=/html/studentdashboard/student_dashboard.jsp",
        "javax.portlet.resource-bundle=content.Language",
        "javax.portlet.security-role-ref=power-user,user"
    },
    service = Portlet.class
)

public class StudentDashboardPortlet extends MVCPortlet {

    private final Log LOG = LogFactoryUtil.getLog(StudentDashboardPortlet.class);

    @Override
    public void doView(RenderRequest renderRequest, RenderResponse renderResponse)
            throws IOException, PortletException {
        ThemeDisplay themeDisplay = (ThemeDisplay) renderRequest.getAttribute(WebKeys.THEME_DISPLAY);
        long userId = themeDisplay.getUserId();

        StudentTeacherLink studentTeacherLink = null;
        try {
            studentTeacherLink = StudentTeacherLinkLocalServiceUtil.getStudentTeacherLink(userId);
        } catch (NoSuchStudentTeacherLinkException e) {
            LOG.trace(String.format("This user haven't select a teacher. userId: [%d]", userId), e);
        } catch (PortalException e) {
            LOG.error(String.format("Get StudentTeacherLink by studentId [%d] faield.", userId), e);
        }

        if (Validator.isNull(studentTeacherLink)) {
            renderRequest.setAttribute(Constants.HAS_TEACHER, false);
            include(viewTemplate, renderRequest, renderResponse);
            return;
        }

        long teacherId = studentTeacherLink.getTeacherId();
        User teacher = null;
        try {
            teacher = UserLocalServiceUtil.getUser(teacherId);
        } catch (PortalException e) {
            LOG.error(String.format("Get teacher by teacherId failed. teacherId: [%d]", teacherId), e);
        }

        renderRequest.setAttribute(Constants.HAS_TEACHER, true);

        super.doView(renderRequest, renderResponse);
    }

    @ProcessAction(name = "chooseTeacher")
    public void chooseTeacher(ActionRequest actionRequest, ActionResponse actionResponse) {
        long teacherId = ParamUtil.get(actionRequest, Constants.TEACHER_ID, 0L);
        if (teacherId == 0) {
            LOG.error("No parameter teacherId was sent.");
            return;
        }

        ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
        User user = themeDisplay.getUser();
        long userId = user.getUserId();
        if (!StudentUtil.isStudent(user)) {
            LOG.error(String.format("This user isn't a student. userId: [%d]", userId));
            return;
        }

        StudentTeacherLink studentTeacherLink = StudentTeacherLinkLocalServiceUtil.createStudentTeacherLink(userId);
        studentTeacherLink.setTeacherId(teacherId);
        StudentTeacherLinkLocalServiceUtil.updateStudentTeacherLink(studentTeacherLink);
    }

}

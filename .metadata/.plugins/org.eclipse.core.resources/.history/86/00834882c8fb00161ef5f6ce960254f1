/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package priv.barrow.service.persistence.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.dao.orm.EntityCache;
import com.liferay.portal.kernel.dao.orm.FinderCache;
import com.liferay.portal.kernel.dao.orm.FinderPath;
import com.liferay.portal.kernel.dao.orm.Query;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.service.persistence.impl.BasePersistenceImpl;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.spring.extender.service.ServiceReference;

import priv.barrow.exception.NoSuchTeacherException;

import priv.barrow.model.Teacher;
import priv.barrow.model.impl.TeacherImpl;
import priv.barrow.model.impl.TeacherModelImpl;

import priv.barrow.service.persistence.TeacherPersistence;

import java.io.Serializable;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * The persistence implementation for the teacher service.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TeacherPersistence
 * @see priv.barrow.service.persistence.TeacherUtil
 * @generated
 */
@ProviderType
public class TeacherPersistenceImpl extends BasePersistenceImpl<Teacher>
	implements TeacherPersistence {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link TeacherUtil} to access the teacher persistence. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
	 */
	public static final String FINDER_CLASS_NAME_ENTITY = TeacherImpl.class.getName();
	public static final String FINDER_CLASS_NAME_LIST_WITH_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List1";
	public static final String FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List2";
	public static final FinderPath FINDER_PATH_WITH_PAGINATION_FIND_ALL = new FinderPath(TeacherModelImpl.ENTITY_CACHE_ENABLED,
			TeacherModelImpl.FINDER_CACHE_ENABLED, TeacherImpl.class,
			FINDER_CLASS_NAME_LIST_WITH_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL = new FinderPath(TeacherModelImpl.ENTITY_CACHE_ENABLED,
			TeacherModelImpl.FINDER_CACHE_ENABLED, TeacherImpl.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_COUNT_ALL = new FinderPath(TeacherModelImpl.ENTITY_CACHE_ENABLED,
			TeacherModelImpl.FINDER_CACHE_ENABLED, Long.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countAll", new String[0]);

	public TeacherPersistenceImpl() {
		setModelClass(Teacher.class);
	}

	/**
	 * Caches the teacher in the entity cache if it is enabled.
	 *
	 * @param teacher the teacher
	 */
	@Override
	public void cacheResult(Teacher teacher) {
		entityCache.putResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
			TeacherImpl.class, teacher.getPrimaryKey(), teacher);

		teacher.resetOriginalValues();
	}

	/**
	 * Caches the teachers in the entity cache if it is enabled.
	 *
	 * @param teachers the teachers
	 */
	@Override
	public void cacheResult(List<Teacher> teachers) {
		for (Teacher teacher : teachers) {
			if (entityCache.getResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
						TeacherImpl.class, teacher.getPrimaryKey()) == null) {
				cacheResult(teacher);
			}
			else {
				teacher.resetOriginalValues();
			}
		}
	}

	/**
	 * Clears the cache for all teachers.
	 *
	 * <p>
	 * The {@link EntityCache} and {@link FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache() {
		entityCache.clearCache(TeacherImpl.class);

		finderCache.clearCache(FINDER_CLASS_NAME_ENTITY);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	/**
	 * Clears the cache for the teacher.
	 *
	 * <p>
	 * The {@link EntityCache} and {@link FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache(Teacher teacher) {
		entityCache.removeResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
			TeacherImpl.class, teacher.getPrimaryKey());

		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	@Override
	public void clearCache(List<Teacher> teachers) {
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);

		for (Teacher teacher : teachers) {
			entityCache.removeResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
				TeacherImpl.class, teacher.getPrimaryKey());
		}
	}

	/**
	 * Creates a new teacher with the primary key. Does not add the teacher to the database.
	 *
	 * @param teacherNumber the primary key for the new teacher
	 * @return the new teacher
	 */
	@Override
	public Teacher create(long teacherNumber) {
		Teacher teacher = new TeacherImpl();

		teacher.setNew(true);
		teacher.setPrimaryKey(teacherNumber);

		return teacher;
	}

	/**
	 * Removes the teacher with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param teacherNumber the primary key of the teacher
	 * @return the teacher that was removed
	 * @throws NoSuchTeacherException if a teacher with the primary key could not be found
	 */
	@Override
	public Teacher remove(long teacherNumber) throws NoSuchTeacherException {
		return remove((Serializable)teacherNumber);
	}

	/**
	 * Removes the teacher with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param primaryKey the primary key of the teacher
	 * @return the teacher that was removed
	 * @throws NoSuchTeacherException if a teacher with the primary key could not be found
	 */
	@Override
	public Teacher remove(Serializable primaryKey)
		throws NoSuchTeacherException {
		Session session = null;

		try {
			session = openSession();

			Teacher teacher = (Teacher)session.get(TeacherImpl.class, primaryKey);

			if (teacher == null) {
				if (_log.isDebugEnabled()) {
					_log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchTeacherException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(teacher);
		}
		catch (NoSuchTeacherException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}

	@Override
	protected Teacher removeImpl(Teacher teacher) {
		teacher = toUnwrappedModel(teacher);

		Session session = null;

		try {
			session = openSession();

			if (!session.contains(teacher)) {
				teacher = (Teacher)session.get(TeacherImpl.class,
						teacher.getPrimaryKeyObj());
			}

			if (teacher != null) {
				session.delete(teacher);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		if (teacher != null) {
			clearCache(teacher);
		}

		return teacher;
	}

	@Override
	public Teacher updateImpl(Teacher teacher) {
		teacher = toUnwrappedModel(teacher);

		boolean isNew = teacher.isNew();

		Session session = null;

		try {
			session = openSession();

			if (teacher.isNew()) {
				session.save(teacher);

				teacher.setNew(false);
			}
			else {
				teacher = (Teacher)session.merge(teacher);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);

		if (isNew) {
			finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
		}

		entityCache.putResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
			TeacherImpl.class, teacher.getPrimaryKey(), teacher, false);

		teacher.resetOriginalValues();

		return teacher;
	}

	protected Teacher toUnwrappedModel(Teacher teacher) {
		if (teacher instanceof TeacherImpl) {
			return teacher;
		}

		TeacherImpl teacherImpl = new TeacherImpl();

		teacherImpl.setNew(teacher.isNew());
		teacherImpl.setPrimaryKey(teacher.getPrimaryKey());

		teacherImpl.setTeacherNumber(teacher.getTeacherNumber());
		teacherImpl.setUserId(teacher.getUserId());

		return teacherImpl;
	}

	/**
	 * Returns the teacher with the primary key or throws a {@link com.liferay.portal.kernel.exception.NoSuchModelException} if it could not be found.
	 *
	 * @param primaryKey the primary key of the teacher
	 * @return the teacher
	 * @throws NoSuchTeacherException if a teacher with the primary key could not be found
	 */
	@Override
	public Teacher findByPrimaryKey(Serializable primaryKey)
		throws NoSuchTeacherException {
		Teacher teacher = fetchByPrimaryKey(primaryKey);

		if (teacher == null) {
			if (_log.isDebugEnabled()) {
				_log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
			}

			throw new NoSuchTeacherException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
				primaryKey);
		}

		return teacher;
	}

	/**
	 * Returns the teacher with the primary key or throws a {@link NoSuchTeacherException} if it could not be found.
	 *
	 * @param teacherNumber the primary key of the teacher
	 * @return the teacher
	 * @throws NoSuchTeacherException if a teacher with the primary key could not be found
	 */
	@Override
	public Teacher findByPrimaryKey(long teacherNumber)
		throws NoSuchTeacherException {
		return findByPrimaryKey((Serializable)teacherNumber);
	}

	/**
	 * Returns the teacher with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param primaryKey the primary key of the teacher
	 * @return the teacher, or <code>null</code> if a teacher with the primary key could not be found
	 */
	@Override
	public Teacher fetchByPrimaryKey(Serializable primaryKey) {
		Serializable serializable = entityCache.getResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
				TeacherImpl.class, primaryKey);

		if (serializable == nullModel) {
			return null;
		}

		Teacher teacher = (Teacher)serializable;

		if (teacher == null) {
			Session session = null;

			try {
				session = openSession();

				teacher = (Teacher)session.get(TeacherImpl.class, primaryKey);

				if (teacher != null) {
					cacheResult(teacher);
				}
				else {
					entityCache.putResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
						TeacherImpl.class, primaryKey, nullModel);
				}
			}
			catch (Exception e) {
				entityCache.removeResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
					TeacherImpl.class, primaryKey);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return teacher;
	}

	/**
	 * Returns the teacher with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param teacherNumber the primary key of the teacher
	 * @return the teacher, or <code>null</code> if a teacher with the primary key could not be found
	 */
	@Override
	public Teacher fetchByPrimaryKey(long teacherNumber) {
		return fetchByPrimaryKey((Serializable)teacherNumber);
	}

	@Override
	public Map<Serializable, Teacher> fetchByPrimaryKeys(
		Set<Serializable> primaryKeys) {
		if (primaryKeys.isEmpty()) {
			return Collections.emptyMap();
		}

		Map<Serializable, Teacher> map = new HashMap<Serializable, Teacher>();

		if (primaryKeys.size() == 1) {
			Iterator<Serializable> iterator = primaryKeys.iterator();

			Serializable primaryKey = iterator.next();

			Teacher teacher = fetchByPrimaryKey(primaryKey);

			if (teacher != null) {
				map.put(primaryKey, teacher);
			}

			return map;
		}

		Set<Serializable> uncachedPrimaryKeys = null;

		for (Serializable primaryKey : primaryKeys) {
			Serializable serializable = entityCache.getResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
					TeacherImpl.class, primaryKey);

			if (serializable != nullModel) {
				if (serializable == null) {
					if (uncachedPrimaryKeys == null) {
						uncachedPrimaryKeys = new HashSet<Serializable>();
					}

					uncachedPrimaryKeys.add(primaryKey);
				}
				else {
					map.put(primaryKey, (Teacher)serializable);
				}
			}
		}

		if (uncachedPrimaryKeys == null) {
			return map;
		}

		StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) +
				1);

		query.append(_SQL_SELECT_TEACHER_WHERE_PKS_IN);

		for (Serializable primaryKey : uncachedPrimaryKeys) {
			query.append(String.valueOf(primaryKey));

			query.append(StringPool.COMMA);
		}

		query.setIndex(query.index() - 1);

		query.append(StringPool.CLOSE_PARENTHESIS);

		String sql = query.toString();

		Session session = null;

		try {
			session = openSession();

			Query q = session.createQuery(sql);

			for (Teacher teacher : (List<Teacher>)q.list()) {
				map.put(teacher.getPrimaryKeyObj(), teacher);

				cacheResult(teacher);

				uncachedPrimaryKeys.remove(teacher.getPrimaryKeyObj());
			}

			for (Serializable primaryKey : uncachedPrimaryKeys) {
				entityCache.putResult(TeacherModelImpl.ENTITY_CACHE_ENABLED,
					TeacherImpl.class, primaryKey, nullModel);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		return map;
	}

	/**
	 * Returns all the teachers.
	 *
	 * @return the teachers
	 */
	@Override
	public List<Teacher> findAll() {
		return findAll(QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);
	}

	/**
	 * Returns a range of all the teachers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link TeacherModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of teachers
	 * @param end the upper bound of the range of teachers (not inclusive)
	 * @return the range of teachers
	 */
	@Override
	public List<Teacher> findAll(int start, int end) {
		return findAll(start, end, null);
	}

	/**
	 * Returns an ordered range of all the teachers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link TeacherModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of teachers
	 * @param end the upper bound of the range of teachers (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of teachers
	 */
	@Override
	public List<Teacher> findAll(int start, int end,
		OrderByComparator<Teacher> orderByComparator) {
		return findAll(start, end, orderByComparator, true);
	}

	/**
	 * Returns an ordered range of all the teachers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link TeacherModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of teachers
	 * @param end the upper bound of the range of teachers (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @param retrieveFromCache whether to retrieve from the finder cache
	 * @return the ordered range of teachers
	 */
	@Override
	public List<Teacher> findAll(int start, int end,
		OrderByComparator<Teacher> orderByComparator, boolean retrieveFromCache) {
		boolean pagination = true;
		FinderPath finderPath = null;
		Object[] finderArgs = null;

		if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&
				(orderByComparator == null)) {
			pagination = false;
			finderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL;
			finderArgs = FINDER_ARGS_EMPTY;
		}
		else {
			finderPath = FINDER_PATH_WITH_PAGINATION_FIND_ALL;
			finderArgs = new Object[] { start, end, orderByComparator };
		}

		List<Teacher> list = null;

		if (retrieveFromCache) {
			list = (List<Teacher>)finderCache.getResult(finderPath, finderArgs,
					this);
		}

		if (list == null) {
			StringBundler query = null;
			String sql = null;

			if (orderByComparator != null) {
				query = new StringBundler(2 +
						(orderByComparator.getOrderByFields().length * 2));

				query.append(_SQL_SELECT_TEACHER);

				appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,
					orderByComparator);

				sql = query.toString();
			}
			else {
				sql = _SQL_SELECT_TEACHER;

				if (pagination) {
					sql = sql.concat(TeacherModelImpl.ORDER_BY_JPQL);
				}
			}

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				if (!pagination) {
					list = (List<Teacher>)QueryUtil.list(q, getDialect(),
							start, end, false);

					Collections.sort(list);

					list = Collections.unmodifiableList(list);
				}
				else {
					list = (List<Teacher>)QueryUtil.list(q, getDialect(),
							start, end);
				}

				cacheResult(list);

				finderCache.putResult(finderPath, finderArgs, list);
			}
			catch (Exception e) {
				finderCache.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return list;
	}

	/**
	 * Removes all the teachers from the database.
	 *
	 */
	@Override
	public void removeAll() {
		for (Teacher teacher : findAll()) {
			remove(teacher);
		}
	}

	/**
	 * Returns the number of teachers.
	 *
	 * @return the number of teachers
	 */
	@Override
	public int countAll() {
		Long count = (Long)finderCache.getResult(FINDER_PATH_COUNT_ALL,
				FINDER_ARGS_EMPTY, this);

		if (count == null) {
			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(_SQL_COUNT_TEACHER);

				count = (Long)q.uniqueResult();

				finderCache.putResult(FINDER_PATH_COUNT_ALL, FINDER_ARGS_EMPTY,
					count);
			}
			catch (Exception e) {
				finderCache.removeResult(FINDER_PATH_COUNT_ALL,
					FINDER_ARGS_EMPTY);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return count.intValue();
	}

	@Override
	protected Map<String, Integer> getTableColumnsMap() {
		return TeacherModelImpl.TABLE_COLUMNS_MAP;
	}

	/**
	 * Initializes the teacher persistence.
	 */
	public void afterPropertiesSet() {
	}

	public void destroy() {
		entityCache.removeCache(TeacherImpl.class.getName());
		finderCache.removeCache(FINDER_CLASS_NAME_ENTITY);
		finderCache.removeCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.removeCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	@ServiceReference(type = EntityCache.class)
	protected EntityCache entityCache;
	@ServiceReference(type = FinderCache.class)
	protected FinderCache finderCache;
	private static final String _SQL_SELECT_TEACHER = "SELECT teacher FROM Teacher teacher";
	private static final String _SQL_SELECT_TEACHER_WHERE_PKS_IN = "SELECT teacher FROM Teacher teacher WHERE teacherNumber IN (";
	private static final String _SQL_COUNT_TEACHER = "SELECT COUNT(teacher) FROM Teacher teacher";
	private static final String _ORDER_BY_ENTITY_ALIAS = "teacher.";
	private static final String _NO_SUCH_ENTITY_WITH_PRIMARY_KEY = "No Teacher exists with the primary key ";
	private static final Log _log = LogFactoryUtil.getLog(TeacherPersistenceImpl.class);
}
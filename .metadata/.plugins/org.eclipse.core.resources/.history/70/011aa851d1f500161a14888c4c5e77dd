/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package oes.service.service.persistence.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.dao.orm.EntityCache;
import com.liferay.portal.kernel.dao.orm.FinderCache;
import com.liferay.portal.kernel.dao.orm.FinderPath;
import com.liferay.portal.kernel.dao.orm.Query;
import com.liferay.portal.kernel.dao.orm.QueryUtil;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.service.persistence.impl.BasePersistenceImpl;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.spring.extender.service.ServiceReference;

import oes.service.exception.NoSuchOESQuestionException;

import oes.service.model.OESQuestion;
import oes.service.model.impl.OESQuestionImpl;
import oes.service.model.impl.OESQuestionModelImpl;

import oes.service.service.persistence.OESQuestionPersistence;

import java.io.Serializable;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * The persistence implementation for the oes question service.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see OESQuestionPersistence
 * @see oes.service.service.persistence.OESQuestionUtil
 * @generated
 */
@ProviderType
public class OESQuestionPersistenceImpl extends BasePersistenceImpl<OESQuestion>
	implements OESQuestionPersistence {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link OESQuestionUtil} to access the oes question persistence. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this class.
	 */
	public static final String FINDER_CLASS_NAME_ENTITY = OESQuestionImpl.class.getName();
	public static final String FINDER_CLASS_NAME_LIST_WITH_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List1";
	public static final String FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION = FINDER_CLASS_NAME_ENTITY +
		".List2";
	public static final FinderPath FINDER_PATH_WITH_PAGINATION_FIND_ALL = new FinderPath(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
			OESQuestionModelImpl.FINDER_CACHE_ENABLED, OESQuestionImpl.class,
			FINDER_CLASS_NAME_LIST_WITH_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL = new FinderPath(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
			OESQuestionModelImpl.FINDER_CACHE_ENABLED, OESQuestionImpl.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "findAll", new String[0]);
	public static final FinderPath FINDER_PATH_COUNT_ALL = new FinderPath(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
			OESQuestionModelImpl.FINDER_CACHE_ENABLED, Long.class,
			FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION, "countAll", new String[0]);

	public OESQuestionPersistenceImpl() {
		setModelClass(OESQuestion.class);
	}

	/**
	 * Caches the oes question in the entity cache if it is enabled.
	 *
	 * @param oesQuestion the oes question
	 */
	@Override
	public void cacheResult(OESQuestion oesQuestion) {
		entityCache.putResult(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
			OESQuestionImpl.class, oesQuestion.getPrimaryKey(), oesQuestion);

		oesQuestion.resetOriginalValues();
	}

	/**
	 * Caches the oes questions in the entity cache if it is enabled.
	 *
	 * @param oesQuestions the oes questions
	 */
	@Override
	public void cacheResult(List<OESQuestion> oesQuestions) {
		for (OESQuestion oesQuestion : oesQuestions) {
			if (entityCache.getResult(
						OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
						OESQuestionImpl.class, oesQuestion.getPrimaryKey()) == null) {
				cacheResult(oesQuestion);
			}
			else {
				oesQuestion.resetOriginalValues();
			}
		}
	}

	/**
	 * Clears the cache for all oes questions.
	 *
	 * <p>
	 * The {@link EntityCache} and {@link FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache() {
		entityCache.clearCache(OESQuestionImpl.class);

		finderCache.clearCache(FINDER_CLASS_NAME_ENTITY);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	/**
	 * Clears the cache for the oes question.
	 *
	 * <p>
	 * The {@link EntityCache} and {@link FinderCache} are both cleared by this method.
	 * </p>
	 */
	@Override
	public void clearCache(OESQuestion oesQuestion) {
		entityCache.removeResult(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
			OESQuestionImpl.class, oesQuestion.getPrimaryKey());

		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	@Override
	public void clearCache(List<OESQuestion> oesQuestions) {
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);

		for (OESQuestion oesQuestion : oesQuestions) {
			entityCache.removeResult(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
				OESQuestionImpl.class, oesQuestion.getPrimaryKey());
		}
	}

	/**
	 * Creates a new oes question with the primary key. Does not add the oes question to the database.
	 *
	 * @param questionSid the primary key for the new oes question
	 * @return the new oes question
	 */
	@Override
	public OESQuestion create(long questionSid) {
		OESQuestion oesQuestion = new OESQuestionImpl();

		oesQuestion.setNew(true);
		oesQuestion.setPrimaryKey(questionSid);

		return oesQuestion;
	}

	/**
	 * Removes the oes question with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param questionSid the primary key of the oes question
	 * @return the oes question that was removed
	 * @throws NoSuchOESQuestionException if a oes question with the primary key could not be found
	 */
	@Override
	public OESQuestion remove(long questionSid)
		throws NoSuchOESQuestionException {
		return remove((Serializable)questionSid);
	}

	/**
	 * Removes the oes question with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param primaryKey the primary key of the oes question
	 * @return the oes question that was removed
	 * @throws NoSuchOESQuestionException if a oes question with the primary key could not be found
	 */
	@Override
	public OESQuestion remove(Serializable primaryKey)
		throws NoSuchOESQuestionException {
		Session session = null;

		try {
			session = openSession();

			OESQuestion oesQuestion = (OESQuestion)session.get(OESQuestionImpl.class,
					primaryKey);

			if (oesQuestion == null) {
				if (_log.isDebugEnabled()) {
					_log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
				}

				throw new NoSuchOESQuestionException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
					primaryKey);
			}

			return remove(oesQuestion);
		}
		catch (NoSuchOESQuestionException nsee) {
			throw nsee;
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}
	}

	@Override
	protected OESQuestion removeImpl(OESQuestion oesQuestion) {
		oesQuestion = toUnwrappedModel(oesQuestion);

		Session session = null;

		try {
			session = openSession();

			if (!session.contains(oesQuestion)) {
				oesQuestion = (OESQuestion)session.get(OESQuestionImpl.class,
						oesQuestion.getPrimaryKeyObj());
			}

			if (oesQuestion != null) {
				session.delete(oesQuestion);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		if (oesQuestion != null) {
			clearCache(oesQuestion);
		}

		return oesQuestion;
	}

	@Override
	public OESQuestion updateImpl(OESQuestion oesQuestion) {
		oesQuestion = toUnwrappedModel(oesQuestion);

		boolean isNew = oesQuestion.isNew();

		Session session = null;

		try {
			session = openSession();

			if (oesQuestion.isNew()) {
				session.save(oesQuestion);

				oesQuestion.setNew(false);
			}
			else {
				oesQuestion = (OESQuestion)session.merge(oesQuestion);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);

		if (isNew) {
			finderCache.clearCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
		}

		entityCache.putResult(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
			OESQuestionImpl.class, oesQuestion.getPrimaryKey(), oesQuestion,
			false);

		oesQuestion.resetOriginalValues();

		return oesQuestion;
	}

	protected OESQuestion toUnwrappedModel(OESQuestion oesQuestion) {
		if (oesQuestion instanceof OESQuestionImpl) {
			return oesQuestion;
		}

		OESQuestionImpl oesQuestionImpl = new OESQuestionImpl();

		oesQuestionImpl.setNew(oesQuestion.isNew());
		oesQuestionImpl.setPrimaryKey(oesQuestion.getPrimaryKey());

		oesQuestionImpl.setQuestionSid(oesQuestion.getQuestionSid());
		oesQuestionImpl.setDdmContentId(oesQuestion.getDdmContentId());

		return oesQuestionImpl;
	}

	/**
	 * Returns the oes question with the primary key or throws a {@link com.liferay.portal.kernel.exception.NoSuchModelException} if it could not be found.
	 *
	 * @param primaryKey the primary key of the oes question
	 * @return the oes question
	 * @throws NoSuchOESQuestionException if a oes question with the primary key could not be found
	 */
	@Override
	public OESQuestion findByPrimaryKey(Serializable primaryKey)
		throws NoSuchOESQuestionException {
		OESQuestion oesQuestion = fetchByPrimaryKey(primaryKey);

		if (oesQuestion == null) {
			if (_log.isDebugEnabled()) {
				_log.debug(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY + primaryKey);
			}

			throw new NoSuchOESQuestionException(_NO_SUCH_ENTITY_WITH_PRIMARY_KEY +
				primaryKey);
		}

		return oesQuestion;
	}

	/**
	 * Returns the oes question with the primary key or throws a {@link NoSuchOESQuestionException} if it could not be found.
	 *
	 * @param questionSid the primary key of the oes question
	 * @return the oes question
	 * @throws NoSuchOESQuestionException if a oes question with the primary key could not be found
	 */
	@Override
	public OESQuestion findByPrimaryKey(long questionSid)
		throws NoSuchOESQuestionException {
		return findByPrimaryKey((Serializable)questionSid);
	}

	/**
	 * Returns the oes question with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param primaryKey the primary key of the oes question
	 * @return the oes question, or <code>null</code> if a oes question with the primary key could not be found
	 */
	@Override
	public OESQuestion fetchByPrimaryKey(Serializable primaryKey) {
		Serializable serializable = entityCache.getResult(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
				OESQuestionImpl.class, primaryKey);

		if (serializable == nullModel) {
			return null;
		}

		OESQuestion oesQuestion = (OESQuestion)serializable;

		if (oesQuestion == null) {
			Session session = null;

			try {
				session = openSession();

				oesQuestion = (OESQuestion)session.get(OESQuestionImpl.class,
						primaryKey);

				if (oesQuestion != null) {
					cacheResult(oesQuestion);
				}
				else {
					entityCache.putResult(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
						OESQuestionImpl.class, primaryKey, nullModel);
				}
			}
			catch (Exception e) {
				entityCache.removeResult(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
					OESQuestionImpl.class, primaryKey);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return oesQuestion;
	}

	/**
	 * Returns the oes question with the primary key or returns <code>null</code> if it could not be found.
	 *
	 * @param questionSid the primary key of the oes question
	 * @return the oes question, or <code>null</code> if a oes question with the primary key could not be found
	 */
	@Override
	public OESQuestion fetchByPrimaryKey(long questionSid) {
		return fetchByPrimaryKey((Serializable)questionSid);
	}

	@Override
	public Map<Serializable, OESQuestion> fetchByPrimaryKeys(
		Set<Serializable> primaryKeys) {
		if (primaryKeys.isEmpty()) {
			return Collections.emptyMap();
		}

		Map<Serializable, OESQuestion> map = new HashMap<Serializable, OESQuestion>();

		if (primaryKeys.size() == 1) {
			Iterator<Serializable> iterator = primaryKeys.iterator();

			Serializable primaryKey = iterator.next();

			OESQuestion oesQuestion = fetchByPrimaryKey(primaryKey);

			if (oesQuestion != null) {
				map.put(primaryKey, oesQuestion);
			}

			return map;
		}

		Set<Serializable> uncachedPrimaryKeys = null;

		for (Serializable primaryKey : primaryKeys) {
			Serializable serializable = entityCache.getResult(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
					OESQuestionImpl.class, primaryKey);

			if (serializable != nullModel) {
				if (serializable == null) {
					if (uncachedPrimaryKeys == null) {
						uncachedPrimaryKeys = new HashSet<Serializable>();
					}

					uncachedPrimaryKeys.add(primaryKey);
				}
				else {
					map.put(primaryKey, (OESQuestion)serializable);
				}
			}
		}

		if (uncachedPrimaryKeys == null) {
			return map;
		}

		StringBundler query = new StringBundler((uncachedPrimaryKeys.size() * 2) +
				1);

		query.append(_SQL_SELECT_OESQUESTION_WHERE_PKS_IN);

		for (Serializable primaryKey : uncachedPrimaryKeys) {
			query.append(String.valueOf(primaryKey));

			query.append(StringPool.COMMA);
		}

		query.setIndex(query.index() - 1);

		query.append(StringPool.CLOSE_PARENTHESIS);

		String sql = query.toString();

		Session session = null;

		try {
			session = openSession();

			Query q = session.createQuery(sql);

			for (OESQuestion oesQuestion : (List<OESQuestion>)q.list()) {
				map.put(oesQuestion.getPrimaryKeyObj(), oesQuestion);

				cacheResult(oesQuestion);

				uncachedPrimaryKeys.remove(oesQuestion.getPrimaryKeyObj());
			}

			for (Serializable primaryKey : uncachedPrimaryKeys) {
				entityCache.putResult(OESQuestionModelImpl.ENTITY_CACHE_ENABLED,
					OESQuestionImpl.class, primaryKey, nullModel);
			}
		}
		catch (Exception e) {
			throw processException(e);
		}
		finally {
			closeSession(session);
		}

		return map;
	}

	/**
	 * Returns all the oes questions.
	 *
	 * @return the oes questions
	 */
	@Override
	public List<OESQuestion> findAll() {
		return findAll(QueryUtil.ALL_POS, QueryUtil.ALL_POS, null);
	}

	/**
	 * Returns a range of all the oes questions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of oes questions
	 * @param end the upper bound of the range of oes questions (not inclusive)
	 * @return the range of oes questions
	 */
	@Override
	public List<OESQuestion> findAll(int start, int end) {
		return findAll(start, end, null);
	}

	/**
	 * Returns an ordered range of all the oes questions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of oes questions
	 * @param end the upper bound of the range of oes questions (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of oes questions
	 */
	@Override
	public List<OESQuestion> findAll(int start, int end,
		OrderByComparator<OESQuestion> orderByComparator) {
		return findAll(start, end, orderByComparator, true);
	}

	/**
	 * Returns an ordered range of all the oes questions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of oes questions
	 * @param end the upper bound of the range of oes questions (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @param retrieveFromCache whether to retrieve from the finder cache
	 * @return the ordered range of oes questions
	 */
	@Override
	public List<OESQuestion> findAll(int start, int end,
		OrderByComparator<OESQuestion> orderByComparator,
		boolean retrieveFromCache) {
		boolean pagination = true;
		FinderPath finderPath = null;
		Object[] finderArgs = null;

		if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) &&
				(orderByComparator == null)) {
			pagination = false;
			finderPath = FINDER_PATH_WITHOUT_PAGINATION_FIND_ALL;
			finderArgs = FINDER_ARGS_EMPTY;
		}
		else {
			finderPath = FINDER_PATH_WITH_PAGINATION_FIND_ALL;
			finderArgs = new Object[] { start, end, orderByComparator };
		}

		List<OESQuestion> list = null;

		if (retrieveFromCache) {
			list = (List<OESQuestion>)finderCache.getResult(finderPath,
					finderArgs, this);
		}

		if (list == null) {
			StringBundler query = null;
			String sql = null;

			if (orderByComparator != null) {
				query = new StringBundler(2 +
						(orderByComparator.getOrderByFields().length * 2));

				query.append(_SQL_SELECT_OESQUESTION);

				appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS,
					orderByComparator);

				sql = query.toString();
			}
			else {
				sql = _SQL_SELECT_OESQUESTION;

				if (pagination) {
					sql = sql.concat(OESQuestionModelImpl.ORDER_BY_JPQL);
				}
			}

			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(sql);

				if (!pagination) {
					list = (List<OESQuestion>)QueryUtil.list(q, getDialect(),
							start, end, false);

					Collections.sort(list);

					list = Collections.unmodifiableList(list);
				}
				else {
					list = (List<OESQuestion>)QueryUtil.list(q, getDialect(),
							start, end);
				}

				cacheResult(list);

				finderCache.putResult(finderPath, finderArgs, list);
			}
			catch (Exception e) {
				finderCache.removeResult(finderPath, finderArgs);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return list;
	}

	/**
	 * Removes all the oes questions from the database.
	 *
	 */
	@Override
	public void removeAll() {
		for (OESQuestion oesQuestion : findAll()) {
			remove(oesQuestion);
		}
	}

	/**
	 * Returns the number of oes questions.
	 *
	 * @return the number of oes questions
	 */
	@Override
	public int countAll() {
		Long count = (Long)finderCache.getResult(FINDER_PATH_COUNT_ALL,
				FINDER_ARGS_EMPTY, this);

		if (count == null) {
			Session session = null;

			try {
				session = openSession();

				Query q = session.createQuery(_SQL_COUNT_OESQUESTION);

				count = (Long)q.uniqueResult();

				finderCache.putResult(FINDER_PATH_COUNT_ALL, FINDER_ARGS_EMPTY,
					count);
			}
			catch (Exception e) {
				finderCache.removeResult(FINDER_PATH_COUNT_ALL,
					FINDER_ARGS_EMPTY);

				throw processException(e);
			}
			finally {
				closeSession(session);
			}
		}

		return count.intValue();
	}

	@Override
	protected Map<String, Integer> getTableColumnsMap() {
		return OESQuestionModelImpl.TABLE_COLUMNS_MAP;
	}

	/**
	 * Initializes the oes question persistence.
	 */
	public void afterPropertiesSet() {
	}

	public void destroy() {
		entityCache.removeCache(OESQuestionImpl.class.getName());
		finderCache.removeCache(FINDER_CLASS_NAME_ENTITY);
		finderCache.removeCache(FINDER_CLASS_NAME_LIST_WITH_PAGINATION);
		finderCache.removeCache(FINDER_CLASS_NAME_LIST_WITHOUT_PAGINATION);
	}

	@ServiceReference(type = EntityCache.class)
	protected EntityCache entityCache;
	@ServiceReference(type = FinderCache.class)
	protected FinderCache finderCache;
	private static final String _SQL_SELECT_OESQUESTION = "SELECT oesQuestion FROM OESQuestion oesQuestion";
	private static final String _SQL_SELECT_OESQUESTION_WHERE_PKS_IN = "SELECT oesQuestion FROM OESQuestion oesQuestion WHERE questionSid IN (";
	private static final String _SQL_COUNT_OESQUESTION = "SELECT COUNT(oesQuestion) FROM OESQuestion oesQuestion";
	private static final String _ORDER_BY_ENTITY_ALIAS = "oesQuestion.";
	private static final String _NO_SUCH_ENTITY_WITH_PRIMARY_KEY = "No OESQuestion exists with the primary key ";
	private static final Log _log = LogFactoryUtil.getLog(OESQuestionPersistenceImpl.class);
}
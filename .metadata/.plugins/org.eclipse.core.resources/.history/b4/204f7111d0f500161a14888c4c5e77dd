/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package oes.service.service.persistence;

import aQute.bnd.annotation.ProviderType;

import com.liferay.portal.kernel.service.persistence.BasePersistence;

import oes.service.exception.NoSuchOESQuestionException;

import oes.service.model.OESQuestion;

/**
 * The persistence interface for the oes question service.
 *
 * <p>
 * Caching information and settings can be found in <code>portal.properties</code>
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see oes.service.service.persistence.impl.OESQuestionPersistenceImpl
 * @see OESQuestionUtil
 * @generated
 */
@ProviderType
public interface OESQuestionPersistence extends BasePersistence<OESQuestion> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. Always use {@link OESQuestionUtil} to access the oes question persistence. Modify <code>service.xml</code> and rerun ServiceBuilder to regenerate this interface.
	 */

	/**
	* Returns all the oes questions where uuid = &#63;.
	*
	* @param uuid the uuid
	* @return the matching oes questions
	*/
	public java.util.List<OESQuestion> findByUuid(java.lang.String uuid);

	/**
	* Returns a range of all the oes questions where uuid = &#63;.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param uuid the uuid
	* @param start the lower bound of the range of oes questions
	* @param end the upper bound of the range of oes questions (not inclusive)
	* @return the range of matching oes questions
	*/
	public java.util.List<OESQuestion> findByUuid(java.lang.String uuid,
		int start, int end);

	/**
	* Returns an ordered range of all the oes questions where uuid = &#63;.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param uuid the uuid
	* @param start the lower bound of the range of oes questions
	* @param end the upper bound of the range of oes questions (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of matching oes questions
	*/
	public java.util.List<OESQuestion> findByUuid(java.lang.String uuid,
		int start, int end,
		com.liferay.portal.kernel.util.OrderByComparator<OESQuestion> orderByComparator);

	/**
	* Returns an ordered range of all the oes questions where uuid = &#63;.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param uuid the uuid
	* @param start the lower bound of the range of oes questions
	* @param end the upper bound of the range of oes questions (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @param retrieveFromCache whether to retrieve from the finder cache
	* @return the ordered range of matching oes questions
	*/
	public java.util.List<OESQuestion> findByUuid(java.lang.String uuid,
		int start, int end,
		com.liferay.portal.kernel.util.OrderByComparator<OESQuestion> orderByComparator,
		boolean retrieveFromCache);

	/**
	* Returns the first oes question in the ordered set where uuid = &#63;.
	*
	* @param uuid the uuid
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the first matching oes question
	* @throws NoSuchOESQuestionException if a matching oes question could not be found
	*/
	public OESQuestion findByUuid_First(java.lang.String uuid,
		com.liferay.portal.kernel.util.OrderByComparator<OESQuestion> orderByComparator)
		throws NoSuchOESQuestionException;

	/**
	* Returns the first oes question in the ordered set where uuid = &#63;.
	*
	* @param uuid the uuid
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the first matching oes question, or <code>null</code> if a matching oes question could not be found
	*/
	public OESQuestion fetchByUuid_First(java.lang.String uuid,
		com.liferay.portal.kernel.util.OrderByComparator<OESQuestion> orderByComparator);

	/**
	* Returns the last oes question in the ordered set where uuid = &#63;.
	*
	* @param uuid the uuid
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the last matching oes question
	* @throws NoSuchOESQuestionException if a matching oes question could not be found
	*/
	public OESQuestion findByUuid_Last(java.lang.String uuid,
		com.liferay.portal.kernel.util.OrderByComparator<OESQuestion> orderByComparator)
		throws NoSuchOESQuestionException;

	/**
	* Returns the last oes question in the ordered set where uuid = &#63;.
	*
	* @param uuid the uuid
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the last matching oes question, or <code>null</code> if a matching oes question could not be found
	*/
	public OESQuestion fetchByUuid_Last(java.lang.String uuid,
		com.liferay.portal.kernel.util.OrderByComparator<OESQuestion> orderByComparator);

	/**
	* Returns the oes questions before and after the current oes question in the ordered set where uuid = &#63;.
	*
	* @param questionId the primary key of the current oes question
	* @param uuid the uuid
	* @param orderByComparator the comparator to order the set by (optionally <code>null</code>)
	* @return the previous, current, and next oes question
	* @throws NoSuchOESQuestionException if a oes question with the primary key could not be found
	*/
	public OESQuestion[] findByUuid_PrevAndNext(long questionId,
		java.lang.String uuid,
		com.liferay.portal.kernel.util.OrderByComparator<OESQuestion> orderByComparator)
		throws NoSuchOESQuestionException;

	/**
	* Removes all the oes questions where uuid = &#63; from the database.
	*
	* @param uuid the uuid
	*/
	public void removeByUuid(java.lang.String uuid);

	/**
	* Returns the number of oes questions where uuid = &#63;.
	*
	* @param uuid the uuid
	* @return the number of matching oes questions
	*/
	public int countByUuid(java.lang.String uuid);

	/**
	* Caches the oes question in the entity cache if it is enabled.
	*
	* @param oesQuestion the oes question
	*/
	public void cacheResult(OESQuestion oesQuestion);

	/**
	* Caches the oes questions in the entity cache if it is enabled.
	*
	* @param oesQuestions the oes questions
	*/
	public void cacheResult(java.util.List<OESQuestion> oesQuestions);

	/**
	* Creates a new oes question with the primary key. Does not add the oes question to the database.
	*
	* @param questionId the primary key for the new oes question
	* @return the new oes question
	*/
	public OESQuestion create(long questionId);

	/**
	* Removes the oes question with the primary key from the database. Also notifies the appropriate model listeners.
	*
	* @param questionId the primary key of the oes question
	* @return the oes question that was removed
	* @throws NoSuchOESQuestionException if a oes question with the primary key could not be found
	*/
	public OESQuestion remove(long questionId)
		throws NoSuchOESQuestionException;

	public OESQuestion updateImpl(OESQuestion oesQuestion);

	/**
	* Returns the oes question with the primary key or throws a {@link NoSuchOESQuestionException} if it could not be found.
	*
	* @param questionId the primary key of the oes question
	* @return the oes question
	* @throws NoSuchOESQuestionException if a oes question with the primary key could not be found
	*/
	public OESQuestion findByPrimaryKey(long questionId)
		throws NoSuchOESQuestionException;

	/**
	* Returns the oes question with the primary key or returns <code>null</code> if it could not be found.
	*
	* @param questionId the primary key of the oes question
	* @return the oes question, or <code>null</code> if a oes question with the primary key could not be found
	*/
	public OESQuestion fetchByPrimaryKey(long questionId);

	@Override
	public java.util.Map<java.io.Serializable, OESQuestion> fetchByPrimaryKeys(
		java.util.Set<java.io.Serializable> primaryKeys);

	/**
	* Returns all the oes questions.
	*
	* @return the oes questions
	*/
	public java.util.List<OESQuestion> findAll();

	/**
	* Returns a range of all the oes questions.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of oes questions
	* @param end the upper bound of the range of oes questions (not inclusive)
	* @return the range of oes questions
	*/
	public java.util.List<OESQuestion> findAll(int start, int end);

	/**
	* Returns an ordered range of all the oes questions.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of oes questions
	* @param end the upper bound of the range of oes questions (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @return the ordered range of oes questions
	*/
	public java.util.List<OESQuestion> findAll(int start, int end,
		com.liferay.portal.kernel.util.OrderByComparator<OESQuestion> orderByComparator);

	/**
	* Returns an ordered range of all the oes questions.
	*
	* <p>
	* Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link OESQuestionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	* </p>
	*
	* @param start the lower bound of the range of oes questions
	* @param end the upper bound of the range of oes questions (not inclusive)
	* @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	* @param retrieveFromCache whether to retrieve from the finder cache
	* @return the ordered range of oes questions
	*/
	public java.util.List<OESQuestion> findAll(int start, int end,
		com.liferay.portal.kernel.util.OrderByComparator<OESQuestion> orderByComparator,
		boolean retrieveFromCache);

	/**
	* Removes all the oes questions from the database.
	*/
	public void removeAll();

	/**
	* Returns the number of oes questions.
	*
	* @return the number of oes questions
	*/
	public int countAll();

	@Override
	public java.util.Set<java.lang.String> getBadColumnNames();
}
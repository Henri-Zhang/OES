/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package priv.barrow.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import priv.barrow.model.ExamData;
import priv.barrow.model.ExamDataModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ExamData service. Represents a row in the &quot;OES_ExamData&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ExamDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExamDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExamDataImpl
 * @see ExamData
 * @see ExamDataModel
 * @generated
 */
@ProviderType
public class ExamDataModelImpl extends BaseModelImpl<ExamData>
	implements ExamDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a exam data model instance should use the {@link ExamData} interface instead.
	 */
	public static final String TABLE_NAME = "OES_ExamData";
	public static final Object[][] TABLE_COLUMNS = {
			{ "PK", Types.BIGINT },
			{ "examId", Types.BIGINT },
			{ "studentId", Types.BIGINT },
			{ "questionOrder", Types.BIGINT },
			{ "result", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("PK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("examId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("studentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("questionOrder", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("result", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table OES_ExamData (PK LONG not null primary key,examId LONG,studentId LONG,questionOrder LONG,result VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table OES_ExamData";
	public static final String ORDER_BY_JPQL = " ORDER BY examData.PK ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OES_ExamData.PK ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(priv.barrow.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.priv.barrow.model.ExamData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(priv.barrow.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.priv.barrow.model.ExamData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(priv.barrow.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.priv.barrow.model.ExamData"),
			true);
	public static final long EXAMID_COLUMN_BITMASK = 1L;
	public static final long QUESTIONORDER_COLUMN_BITMASK = 2L;
	public static final long STUDENTID_COLUMN_BITMASK = 4L;
	public static final long PK_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(priv.barrow.service.util.ServiceProps.get(
				"lock.expiration.time.priv.barrow.model.ExamData"));

	public ExamDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PK;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPK(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PK;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExamData.class;
	}

	@Override
	public String getModelClassName() {
		return ExamData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("PK", getPK());
		attributes.put("examId", getExamId());
		attributes.put("studentId", getStudentId());
		attributes.put("questionOrder", getQuestionOrder());
		attributes.put("result", getResult());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long PK = (Long)attributes.get("PK");

		if (PK != null) {
			setPK(PK);
		}

		Long examId = (Long)attributes.get("examId");

		if (examId != null) {
			setExamId(examId);
		}

		Long studentId = (Long)attributes.get("studentId");

		if (studentId != null) {
			setStudentId(studentId);
		}

		Long questionOrder = (Long)attributes.get("questionOrder");

		if (questionOrder != null) {
			setQuestionOrder(questionOrder);
		}

		String result = (String)attributes.get("result");

		if (result != null) {
			setResult(result);
		}
	}

	@Override
	public long getPK() {
		return _PK;
	}

	@Override
	public void setPK(long PK) {
		_PK = PK;
	}

	@Override
	public long getExamId() {
		return _examId;
	}

	@Override
	public void setExamId(long examId) {
		_columnBitmask |= EXAMID_COLUMN_BITMASK;

		if (!_setOriginalExamId) {
			_setOriginalExamId = true;

			_originalExamId = _examId;
		}

		_examId = examId;
	}

	public long getOriginalExamId() {
		return _originalExamId;
	}

	@Override
	public long getStudentId() {
		return _studentId;
	}

	@Override
	public void setStudentId(long studentId) {
		_columnBitmask |= STUDENTID_COLUMN_BITMASK;

		if (!_setOriginalStudentId) {
			_setOriginalStudentId = true;

			_originalStudentId = _studentId;
		}

		_studentId = studentId;
	}

	public long getOriginalStudentId() {
		return _originalStudentId;
	}

	@Override
	public long getQuestionOrder() {
		return _questionOrder;
	}

	@Override
	public void setQuestionOrder(long questionOrder) {
		_columnBitmask |= QUESTIONORDER_COLUMN_BITMASK;

		if (!_setOriginalQuestionOrder) {
			_setOriginalQuestionOrder = true;

			_originalQuestionOrder = _questionOrder;
		}

		_questionOrder = questionOrder;
	}

	public long getOriginalQuestionOrder() {
		return _originalQuestionOrder;
	}

	@Override
	public String getResult() {
		if (_result == null) {
			return StringPool.BLANK;
		}
		else {
			return _result;
		}
	}

	@Override
	public void setResult(String result) {
		_result = result;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ExamData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExamData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExamData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExamDataImpl examDataImpl = new ExamDataImpl();

		examDataImpl.setPK(getPK());
		examDataImpl.setExamId(getExamId());
		examDataImpl.setStudentId(getStudentId());
		examDataImpl.setQuestionOrder(getQuestionOrder());
		examDataImpl.setResult(getResult());

		examDataImpl.resetOriginalValues();

		return examDataImpl;
	}

	@Override
	public int compareTo(ExamData examData) {
		long primaryKey = examData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExamData)) {
			return false;
		}

		ExamData examData = (ExamData)obj;

		long primaryKey = examData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ExamDataModelImpl examDataModelImpl = this;

		examDataModelImpl._originalExamId = examDataModelImpl._examId;

		examDataModelImpl._setOriginalExamId = false;

		examDataModelImpl._originalStudentId = examDataModelImpl._studentId;

		examDataModelImpl._setOriginalStudentId = false;

		examDataModelImpl._originalQuestionOrder = examDataModelImpl._questionOrder;

		examDataModelImpl._setOriginalQuestionOrder = false;

		examDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExamData> toCacheModel() {
		ExamDataCacheModel examDataCacheModel = new ExamDataCacheModel();

		examDataCacheModel.PK = getPK();

		examDataCacheModel.examId = getExamId();

		examDataCacheModel.studentId = getStudentId();

		examDataCacheModel.questionOrder = getQuestionOrder();

		examDataCacheModel.result = getResult();

		String result = examDataCacheModel.result;

		if ((result != null) && (result.length() == 0)) {
			examDataCacheModel.result = null;
		}

		return examDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{PK=");
		sb.append(getPK());
		sb.append(", examId=");
		sb.append(getExamId());
		sb.append(", studentId=");
		sb.append(getStudentId());
		sb.append(", questionOrder=");
		sb.append(getQuestionOrder());
		sb.append(", result=");
		sb.append(getResult());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("priv.barrow.model.ExamData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>PK</column-name><column-value><![CDATA[");
		sb.append(getPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>examId</column-name><column-value><![CDATA[");
		sb.append(getExamId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>studentId</column-name><column-value><![CDATA[");
		sb.append(getStudentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionOrder</column-name><column-value><![CDATA[");
		sb.append(getQuestionOrder());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>result</column-name><column-value><![CDATA[");
		sb.append(getResult());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ExamData.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ExamData.class
		};
	private long _PK;
	private long _examId;
	private long _originalExamId;
	private boolean _setOriginalExamId;
	private long _studentId;
	private long _originalStudentId;
	private boolean _setOriginalStudentId;
	private long _questionOrder;
	private long _originalQuestionOrder;
	private boolean _setOriginalQuestionOrder;
	private String _result;
	private long _columnBitmask;
	private ExamData _escapedModel;
}
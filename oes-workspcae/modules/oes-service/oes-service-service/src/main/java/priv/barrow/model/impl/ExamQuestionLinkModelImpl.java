/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package priv.barrow.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import priv.barrow.model.ExamQuestionLink;
import priv.barrow.model.ExamQuestionLinkModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ExamQuestionLink service. Represents a row in the &quot;OES_ExamQuestionLink&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ExamQuestionLinkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExamQuestionLinkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ExamQuestionLinkImpl
 * @see ExamQuestionLink
 * @see ExamQuestionLinkModel
 * @generated
 */
@ProviderType
public class ExamQuestionLinkModelImpl extends BaseModelImpl<ExamQuestionLink>
	implements ExamQuestionLinkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a exam question link model instance should use the {@link ExamQuestionLink} interface instead.
	 */
	public static final String TABLE_NAME = "OES_ExamQuestionLink";
	public static final Object[][] TABLE_COLUMNS = {
			{ "examRecordId", Types.BIGINT },
			{ "questionRecordId", Types.BIGINT },
			{ "questionRecordVersion", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("examRecordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("questionRecordId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("questionRecordVersion", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table OES_ExamQuestionLink (examRecordId LONG not null primary key,questionRecordId LONG,questionRecordVersion VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table OES_ExamQuestionLink";
	public static final String ORDER_BY_JPQL = " ORDER BY examQuestionLink.examRecordId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OES_ExamQuestionLink.examRecordId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(priv.barrow.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.priv.barrow.model.ExamQuestionLink"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(priv.barrow.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.priv.barrow.model.ExamQuestionLink"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(priv.barrow.service.util.ServiceProps.get(
				"lock.expiration.time.priv.barrow.model.ExamQuestionLink"));

	public ExamQuestionLinkModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _examRecordId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExamRecordId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _examRecordId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExamQuestionLink.class;
	}

	@Override
	public String getModelClassName() {
		return ExamQuestionLink.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("examRecordId", getExamRecordId());
		attributes.put("questionRecordId", getQuestionRecordId());
		attributes.put("questionRecordVersion", getQuestionRecordVersion());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long examRecordId = (Long)attributes.get("examRecordId");

		if (examRecordId != null) {
			setExamRecordId(examRecordId);
		}

		Long questionRecordId = (Long)attributes.get("questionRecordId");

		if (questionRecordId != null) {
			setQuestionRecordId(questionRecordId);
		}

		String questionRecordVersion = (String)attributes.get(
				"questionRecordVersion");

		if (questionRecordVersion != null) {
			setQuestionRecordVersion(questionRecordVersion);
		}
	}

	@Override
	public long getExamRecordId() {
		return _examRecordId;
	}

	@Override
	public void setExamRecordId(long examRecordId) {
		_examRecordId = examRecordId;
	}

	@Override
	public long getQuestionRecordId() {
		return _questionRecordId;
	}

	@Override
	public void setQuestionRecordId(long questionRecordId) {
		_questionRecordId = questionRecordId;
	}

	@Override
	public String getQuestionRecordVersion() {
		if (_questionRecordVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _questionRecordVersion;
		}
	}

	@Override
	public void setQuestionRecordVersion(String questionRecordVersion) {
		_questionRecordVersion = questionRecordVersion;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ExamQuestionLink.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExamQuestionLink toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExamQuestionLink)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExamQuestionLinkImpl examQuestionLinkImpl = new ExamQuestionLinkImpl();

		examQuestionLinkImpl.setExamRecordId(getExamRecordId());
		examQuestionLinkImpl.setQuestionRecordId(getQuestionRecordId());
		examQuestionLinkImpl.setQuestionRecordVersion(getQuestionRecordVersion());

		examQuestionLinkImpl.resetOriginalValues();

		return examQuestionLinkImpl;
	}

	@Override
	public int compareTo(ExamQuestionLink examQuestionLink) {
		long primaryKey = examQuestionLink.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExamQuestionLink)) {
			return false;
		}

		ExamQuestionLink examQuestionLink = (ExamQuestionLink)obj;

		long primaryKey = examQuestionLink.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ExamQuestionLink> toCacheModel() {
		ExamQuestionLinkCacheModel examQuestionLinkCacheModel = new ExamQuestionLinkCacheModel();

		examQuestionLinkCacheModel.examRecordId = getExamRecordId();

		examQuestionLinkCacheModel.questionRecordId = getQuestionRecordId();

		examQuestionLinkCacheModel.questionRecordVersion = getQuestionRecordVersion();

		String questionRecordVersion = examQuestionLinkCacheModel.questionRecordVersion;

		if ((questionRecordVersion != null) &&
				(questionRecordVersion.length() == 0)) {
			examQuestionLinkCacheModel.questionRecordVersion = null;
		}

		return examQuestionLinkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{examRecordId=");
		sb.append(getExamRecordId());
		sb.append(", questionRecordId=");
		sb.append(getQuestionRecordId());
		sb.append(", questionRecordVersion=");
		sb.append(getQuestionRecordVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("priv.barrow.model.ExamQuestionLink");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>examRecordId</column-name><column-value><![CDATA[");
		sb.append(getExamRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionRecordId</column-name><column-value><![CDATA[");
		sb.append(getQuestionRecordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionRecordVersion</column-name><column-value><![CDATA[");
		sb.append(getQuestionRecordVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ExamQuestionLink.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ExamQuestionLink.class
		};
	private long _examRecordId;
	private long _questionRecordId;
	private String _questionRecordVersion;
	private ExamQuestionLink _escapedModel;
}